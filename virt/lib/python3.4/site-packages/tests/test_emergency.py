#!/usr/bin/env python3

# This is proprietary software.
# part of cluster monitoring project.
# PEP8 code style used, python version 3

"""  This module contain tests for Alerts and AlertHandler. """

import unittest

from nms.core.context import ContextCreator
import nms.core.emergency_checker as ec


class TestEmergency(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        """ Create AlertHandler object. """
        cls.context = ContextCreator('buer').from_file()
        cls.db_name = 'emergency_db'

    def test_raise_emergency(self):
        """ TestEmergency: raise emergency state on single device. """
        gdev = self.context.general_devices['MonitoringServer']
        checker = ec.EmergencyChecker(gdev)
        checker.do_log = False
        checker.temperature_parameters = ['CpuTemp1']
        gdev.params_dict['CpuTemp1'].value = 85
        checker.check()
        checker.check()
        self.assertTrue(checker.do_need_to_disable())
        checker.max_consecutive_fails = 3
        self.assertFalse(checker.do_need_to_disable())
        checker.check()
        self.assertTrue(checker.do_need_to_disable())
        gdev.params_dict['CpuTemp1'].value = 20
        checker.check()
        self.assertFalse(checker.do_need_to_disable())

    def test_global_emergency(self):
        """ TestEmergency: raise emergency state on two devices. """
        gdev1 = self.context.general_devices['MonitoringServer']
        gdev2 = self.context.general_devices['ServerRaspred']
        critical_param_list = ['CpuTemp1']
        gchecker = ec.GlobalEmergencyChecker(
            self.context, critical_param_list, 
            ['MonitoringServer', 'ServerRaspred'])
        gdev1.params_dict['CpuTemp1'].value = 85
        gchecker.check()
        self.assertFalse(gchecker.failed_devices)
        gchecker.check()
        self.assertEqual(gchecker.failed_devices, [gdev1.name])
    
    
    


if __name__ == '__main__':
    unittest.main()
