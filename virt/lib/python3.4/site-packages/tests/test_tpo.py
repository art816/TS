#!/usr/bin/env python3

# This is proprietary software.
# part of cluster monitoring project.
# PEP8 code style used, python version 3
#
# authors: dmitry khodakov <dmitryhd@gmail.com>

""" Test TPO. """

import unittest
import unittest.mock as mock

import tpo.checker as checker


class TestTPO(unittest.TestCase):
    """ Test TPO. """
    def test_check_cpu(self):
        """ TPO: run linpack on local machine, and get results. """
        cpu_check = checker.CpuCheck()
        self.assertTrue(cpu_check.run())
        self.assertTrue(cpu_check.status)

    @mock.patch('tpo.checker.subprocess')
    def test_check_num_gpu(self, subprocess_mock):
        """ TPO: get number of gpus.  On localhost just use mock.  """
        gpu_check = checker.GpuNumCheck()
        subprocess_mock.check_output.return_value = 'error\n'
        gpu_check.run()
        self.assertFalse(gpu_check.status)
        subprocess_mock.check_output.return_value = '2\n'
        gpu_check.run()
        self.assertTrue(gpu_check.status)

    @mock.patch('tpo.checker.subprocess')
    def test_check_gpu(self, subprocess_mock):
        """ TPO: compute on gpus. On localhost just use mock.  """
        gpu_check = checker.GpuCheck(0)
        subprocess_mock.check_output.return_value = 'error\n'
        gpu_check.run()
        self.assertFalse(gpu_check.status)
        subprocess_mock.check_output.return_value = (
            'Executing \n'
            "kernel for 50 iterations\n"
            "-------------------------------------------\n"
            "\n"
            "Output\n"
            "6.57822 0.920033 5.39849 5\n")
        gpu_check.run()
        self.assertTrue(gpu_check.status)

    def test_check_disk(self):
        """ TPO: check disks. """
        disk_check = checker.DiskCheck('/tmp/')
        disk_check.run()
        self.assertTrue(disk_check.status)
        fail_disk_check = checker.DiskCheck('/invalid_name/')
        fail_disk_check.run()
        self.assertFalse(fail_disk_check.status)

    def test_check_share(self):
        """ TPO: check that service is running by ssh. """
        ssh_service_check = checker.SshServiceCheck('127.0.0.1', '132')
        ssh_service_check.run()
        self.assertFalse(ssh_service_check.status)


if __name__ == '__main__':
    unittest.main()
