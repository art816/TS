#!/usr/bin/env python3

# This is proprietary software.
# part of cluster monitoring project.
# PEP8 code style used, python version 3
#
# authors:

"""  This module contain tests for Alerts and AlertHandler. """

import unittest

import nms.core.database as db
from nms.core.alerts import Alert, OldAlert
from nms.core.alert_handler import AlertHandler
from nms.core.context import ContextCreator


class TestAlertHandler(unittest.TestCase):
    """ Tests for AlertHandler. """
    ALERT_LEVEL = "err_min"
    BOUND_ERR_MIN = 5
    BOUND_WARN_MIN = 7
    BOUND_WARN_MAX = 9
    BOUND_ERR_MAX = 11
    VALID_VALUE = (BOUND_WARN_MIN + BOUND_WARN_MAX) / 2

    def set_all_parameter_to_error_max(self, device):
        """ Just set alert state to all parameters of device. """
        for param in device.params_dict.values():
            param.boundaries.err_min = self.BOUND_ERR_MIN
            param.boundaries.warn_min = self.BOUND_WARN_MIN
            param.boundaries.warn_max = self.BOUND_WARN_MAX
            param.boundaries.err_max = self.BOUND_ERR_MAX
            param.value = self.BOUND_ERR_MAX + 1

    @classmethod
    def setUpClass(cls):
        """ Create AlertHandler object. """
        cls.context = ContextCreator('localhost').from_file()
        cls.host = cls.context.devices['laptop']
        cls.db_name = 'alerts_test_db'
        db.SessionManager.create_db(cls.db_name)
        cls.session_manager = db.SessionManager(cls.db_name)
        cls.alert_handler = AlertHandler(cls.session_manager)
        cls.system_db = db.SystemDataOperator(cls.session_manager)
        cls.system_db.create_tables(cls.context.general_devices)
        super().assertTrue(cls, cls.alert_handler)

    @classmethod
    def tearDownClass(cls):
        """ Clear tables in database. """
        cls.session_manager.delete()

    def test_add(self):
        """ TestAlertsHandler: Create 2 new alerts. """
        first_alert = Alert(self.host.name, 'memFreePercent',
                            self.ALERT_LEVEL)
        self.alert_handler.alert_data_operator.add_alert(first_alert)
        second_alert = Alert(self.host.name, 'online', self.ALERT_LEVEL)
        self.alert_handler.alert_data_operator.add_alert(second_alert)
        self.assertEqual(len(self.alert_handler.get_alerts()), 2)

    def test_update(self):
        """ TestAlertsHandler: Update first alert in alerts. """
        alert = Alert(self.host.name, 'memFreePercent', self.ALERT_LEVEL)
        self.alert_handler.alert_data_operator.add_alert(alert)
        alerts = self.alert_handler.get_alerts()
        alert = alerts[0]
        answer = self.alert_handler.alert_data_operator.update_alert(
            alert, level=self.ALERT_LEVEL)
        if answer in ('update_alert', 'no_change'):
            self.assertEqual(len(alerts), len(self.alert_handler.get_alerts()))
        if answer in ('kill_alert', 'new_alert'):
            self.assertNotEqual(
                len(alerts), len(self.alert_handler.get_alerts()))
        self.assertEqual(
            self.alert_handler.alert_data_operator.get_entries(
                Alert,
                _filter={'device_name':alert.device_name,
                         'param_name':alert.param_name})[0].level,
            self.ALERT_LEVEL)

    def test_create_alert(self):
        """ TestAlertsHandler: Create new alert. """
        new_alert = Alert(self.host.name, 'ifNumber123', self.ALERT_LEVEL)
        self.assertTrue(new_alert)

    def test_update_alerts(self):
        """ TestAlertsHandler: Check alerts. """
        num_rows_in_alerts = len(self.alert_handler.get_alerts())
        num_rows_in_old_alerts = len(self.alert_handler.get_old_alerts())
        num_change_dict = self.alert_handler.update_alerts([self.host])
        self.assertEqual(
            len(self.alert_handler.get_alerts()),
            num_rows_in_alerts +
            num_change_dict['new_alert'] -
            num_change_dict['kill_alert'])
        self.assertEqual(
            len(self.alert_handler.get_old_alerts()),
            num_rows_in_old_alerts + num_change_dict['update_alert'] +
            num_change_dict['kill_alert'])

    def test_update_alerts_offline(self):
        """ TestAlertsHandler: Check alerts if dev is offline.
            All values are error_max already (see this class).
        """
        self.set_all_parameter_to_error_max(self.host)
        self.alert_handler.clear()
        num_change_dict = self.alert_handler.update_alerts([self.host])
        self.host.is_online = False
        # only online parameter should give alert
        self.assertEqual(num_change_dict['new_alert'], 1)

    def test_get_alert_level(self):
        """ TestAlertsHandler: Get alert level.
            Should get level=False, when there is no alert to raise.
        """
        level = self.alert_handler.get_alert_level(
            self.VALID_VALUE, self.host.params_dict['cpuUser'].boundaries)
        self.assertFalse(level)

    def test_find_alert_in_list(self):
        """ TestAlertsHandler: Find alert in alert list by device name
            and parameter name.
        """
        second_alert = Alert(self.host.name, 'online', self.ALERT_LEVEL)
        self.alert_handler.alert_data_operator.add_alert(second_alert)
        object_alert = self.alert_handler.get_alert(
            device_name=self.host.name, param_name='online')
        self.assertEqual(object_alert.device_name, self.host.name)
        self.assertEqual(object_alert.param_name, 'online')

    def test_kill_alert(self):
        """ TestAlertsHandler: Kill alert. Delete alert from table. """
        alert = self.alert_handler.get_alert(device_name=self.host.name,
                                             param_name='online')
        self.assertTrue(alert)
        self.alert_handler.alert_data_operator.kill_alert(alert, level=1)

    def test_del_table(self):
        """ TestAlertsHandler: Clear table OldAlert. """
        self.alert_handler.alert_data_operator.delete_table(OldAlert)
        self.assertFalse(self.alert_handler.get_old_alerts())

    def test_get_alerts(self):
        """ TestAlertsHandler: Get alerts ordered by start time decreasing. """
        alerts = self.alert_handler.get_alerts()
        alerts_start_times = [alert.start_time for alert in alerts]
        self.assertEqual(alerts_start_times,
                         sorted(alerts_start_times, reverse=True))

    def test_get_old_alerts(self):
        """ TestAlertsHandler: Get oldalerts ordered by start time decreasing.
        """
        alerts = self.alert_handler.get_old_alerts()
        alerts_start_times = [alert.start_time for alert in alerts]
        self.assertEqual(alerts_start_times,
                         sorted(alerts_start_times, reverse=True))

    def test_get_alerts_by_dev_name(self):
        """ TestAlertsHandler: Get alert by dev name ordered by start time
            decreasing.
        """
        alerts = self.alert_handler.get_alerts_by_dev_name(self.host.name)
        for alert in alerts:
            self.assertEqual(alert.device_name, self.host.name)


class TestAlert(unittest.TestCase):
    """ Tests for Alert. """
    def test_alert(self):
        """TestAlert: Create object Alert. """
        alert = Alert('xxx', 'yyy', 'err_min')
        self.assertTrue(alert)
        old_alert = OldAlert(alert)
        self.assertTrue(old_alert)
        self.assertEqual(old_alert.device_name, alert.device_name)

    def test_get_start_time(self):
        """ TestAlert: Get start time alert in valid format. """
        alert = Alert('xxx', 'yyy', 'err_min')
        alert.start_time = 1
        self.assertTrue(alert.get_start_time())

    def test_get_time(self):
        """ TestOldAlert: Get start time and end time oldalert in valid format.
        """
        alert = Alert('xxx', 'yyy', 'err_min')
        oldalert = OldAlert(alert)
        oldalert.start_time = 1
        oldalert.end_time = 1
        self.assertTrue(oldalert.get_start_time())
        self.assertTrue(oldalert.get_end_time())


if __name__ == '__main__':
    unittest.main()
