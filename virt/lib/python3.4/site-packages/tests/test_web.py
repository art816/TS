#!/usr/bin/env python3

# This is proprietary software.
# part of cluster monitoring project.
# PEP8 code style used, python version 3
#
# authors: dmitry khodakov <dmitryhd@gmail.com>

# pylint: disable=no-member

""" General Unit test module. """

import unittest
import json

from nms.web.app import WebApp
from nms.web.pagination import Pagination
from nms.core.context import ContextCreator
import nms.config as cfg


class TestWeb(unittest.TestCase):
    """ Test basic web. """

    def setUp(self):
        self.context = ContextCreator('bussol').from_file()
        web_app = WebApp(self.context, 'nms_bussol_db')
        web_app.app.config['TESTING'] = True
        self.app = web_app.app.test_client()

    def get_page(self, url):
        """ Return utf encoded web page. """
        responce = self.app.get(url, follow_redirects=True)
        return responce.data.decode('utf8')

    def test_index_view(self):
        """ TestWeb: Get index page. """
        html = self.get_page('/nms/')
        self.assertTrue('Мониторинг' in html, html)

    def test_journal_view(self):
        """  TestWeb: Get alerts page. """
        html = self.get_page('/nms/journal/')
        self.assertTrue('Журнал' in html, html)

    def test_pagination(self):
        """  TestWeb: Pagination test. """
        test_list = list(range(120))
        pagination = Pagination(test_list)
        self.assertEqual(pagination.num_pages, 3)
        pagination.cur_page = 1
        self.assertEqual(pagination.get_page(), list(range(0, 50)))
        self.assertFalse(pagination.has_previous)
        self.assertTrue(pagination.has_next)
        self.assertEqual(pagination.next_page_number, 2)
        pagination.cur_page = 2
        self.assertEqual(pagination.get_page(), list(range(50, 100)))
        self.assertTrue(pagination.has_previous)
        self.assertTrue(pagination.has_next)
        self.assertEqual(pagination.next_page_number, 3)
        self.assertEqual(pagination.previous_page_number, 1)
        pagination.cur_page = 3
        self.assertEqual(pagination.get_page(), list(range(100, 120)))
        self.assertTrue(pagination.has_previous)
        self.assertFalse(pagination.has_next)
        self.assertEqual(pagination.previous_page_number, 2)

    def test_alerts_number(self):
        """ TestWeb: Get alerts page and check if pagination works. """
        html = self.get_page('/nms/journal/')
        num_of_alerts = html.count("<td class='alert_dev_name'>")
        self.assertLessEqual(num_of_alerts, cfg.ALERTS_ON_PAGE)
        html = self.get_page('/nms/journal/?page=2')
        self.assertTrue('Журнал' in html, html)

    def test_power_control_view(self):
        """ TestWeb: Get power_control page. Check if it is protected. """
        self.logout()
        html = self.get_page('/nms/power_control/')
        self.assertTrue('Login' in html, html)
        self.login()
        html = self.get_page('/nms/power_control/')
        self.assertTrue('Управление' in html, html)

    def test_test_view(self):
        """ TestWeb: Get test page. Check if it is protected. """
        html = self.get_page('/nms/test/')
        html = self.login()
        self.assertTrue('Проверка' in html, html)

    def test_admin_view(self):
        """ TestWeb: Get admin page. Check if it is protected. """
        html = self.get_page('/nms/admin/')
        html = self.login()
        self.assertTrue('Администрирование' in html, html)

    def test_device_view(self):
        """ TestWeb: Get device info page. """
        short_dev_list = ['ControlServer', 'GPUServer01', 'NetBootzModule01',
                          'RAID01A', 'Switch1810_24_gpu', 'rPDU01']
        html = self.login()
        for device_name in short_dev_list:
            html = self.get_page('/nms/device/' + device_name)
            descr = self.context.general_devices[device_name].description
            self.assertTrue(descr in html, html)
            self.assertTrue("small-plot" in html)

    def test_parameter_view_part(self):
        """ TestWeb: Get parameter info page.
            Only monitoring server to speed up.
        """
        short_param_list = ['sw_in_octets_1', 'memTotalReal', 'diskBlockSize',
                            'diskTotal', 'FRNT_FAN1', 'CpuTemp1', 'online']
        for param_name in short_param_list:
            param = self.context.general_devices['MonitoringServer']\
                .params_dict[param_name]
            url = '/nms/parameter/MonitoringServer/' + param_name
            html = self.login()
            html = self.get_page(url)
            self.assertTrue(param.desc in html, html + '|||' + param.desc)

    def login(self):
        """ Return page, after login """
        raw_response = self.app.post('/nms/login/', data=dict(
            username='root',
            password='111111'
        ), follow_redirects=True)
        return raw_response.data.decode('utf8')

    def logout(self):
        """ Log out of web. """
        return self.app.get(
            '/nms/logout', follow_redirects=True).data.decode('utf8')

    def test_login_form(self):
        """ TestWeb: Get login page """
        page = self.get_page('/nms/login/')
        self.assertTrue('Login NMS' in page, page)

    def test_logout_form(self):
        """ TestWeb: Get logout page """
        self.assertFalse('404' in self.logout())

    def test_valid_login(self):
        """ TestWeb: Login with right login, check if we get greeting. """
        logpage = self.login()
        self.assertTrue('Добро пожаловать' in logpage, logpage)
        self.assertTrue('Выйти' in logpage, logpage)
        self.logout()
        index_page = self.get_page('/nms/')
        self.assertTrue('Войти' in index_page, index_page)

    def test_get_json(self):
        """ TestWeb: Check if Json data loads properly. """
        json_page = self.get_page('/nms/_get_param_data/ControlServer/online/')
        self.assertFalse('error' in json_page, json_page)

    def test_get_device_last_values(self):
        """ TestWeb: Check if we can get device last params in json. """
        json_page = self.get_page('/nms/_get_device_last_values/ControlServer')
        self.assertFalse('404' in json_page, json_page)
        self.assertTrue('online' in json_page, json_page)

    def test_get_param_data(self):
        """ TestWeb: check that we can get json about parameter values. """
        json_page = self.get_page('/nms/_get_param_data/ControlServer/online/')
        values = json.loads(json_page)
        self.assertGreater(len(values['result']), 10)

    @unittest.skip('fix by dmitry')
    def test_get_bx_queue(self):
        """ TestWeb: get bx_queue state. """
        json_page = self.get_page('/nms/_get_bx_queue/')
        values = json.loads(json_page)
        self.assertGreater(len(values), 4)
        processing_method = values['1']
        self.assertTrue(processing_method['tasks'])
        self.assertTrue(processing_method['name'])
        self.assertTrue(processing_method['priority'])
        self.assertTrue(processing_method['current_waiting_time'])
        self.assertTrue(processing_method['max_waiting_time'])

    def test_bx_queue_view(self):
        """ TestWeb: get bx_queue view. """
        html = self.get_page('/nms/bx_queue/')
        html = self.login()
        self.assertTrue('Очередь' in html, html)
        self.assertTrue('bx-queue' in html, html)

    def test_get_server_time(self):
        """ TestWeb: get server time json. """
        json_page = self.get_page('/nms/_get_server_time/')
        serv_time_container = json.loads(json_page)
        self.assertTrue(serv_time_container['time'])

    def test_get_alerts(self):
        """ TestWeb: check json for alerts"""
        json_page = self.get_page('/nms/_get_alerts/all/')
        values = json.loads(json_page)
        self.assertGreater(len(values['alerts']), 1)

    def test_get_old_alerts(self):
        """ TestWeb: check json for old alerts """
        json_page = self.get_page('/nms/_get_old_alerts/all/')
        values = json.loads(json_page)
        self.assertGreater(len(values['alerts']), 1)

if __name__ == '__main__':
    unittest.main()
