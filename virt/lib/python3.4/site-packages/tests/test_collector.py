#!/usr/bin/env python3

# This is proprietary software.
# part of cluster monitoring project.
# PEP8 code style used, python version 3
#
# authors: dmitry khodakov <dmitryhd@gmail.com>

""" Test Suite for collector module. """

import unittest
from copy import deepcopy

import nms.core.database as db
from nms.core.context import Context
from nms.core.collector import Collector
from nms.core.parameters import parameters
from nms.core.devices import Device, GeneralDevice


class TestCollector(unittest.TestCase):
    """ Test collector class: """

    @classmethod
    def setUpClass(cls):
        """ Create database. """
        cls.SLEEP_TIME = 0.1
        cls.db_name = 'database_collector_operator_data'
        cls.context = Context()
        localhost_param_list = ['maxProcesses', 'online']
        test_dev_names = ['localhost_one_param',
                          'localhost_records']
        for dev_name in test_dev_names:
            dev = Device(dev_name, 'Локальная машина', 'snmp',
                         localhost_param_list)
            cls.context.devices[dev_name] = dev
            gdev = GeneralDevice(dev_name, 'Локальная машина', '',
                                 [dev_name], cls.context)
            cls.context.general_devices[dev_name] = gdev

        db.SessionManager.create_db(cls.db_name)
        cls.collector = Collector(cls.db_name, cls.context, cls.SLEEP_TIME)
        cls.collector.db_op_collected.create_tables(cls.context.devices)
        cls.collector.db_op_system.create_tables(cls.context.general_devices)

    @classmethod
    def tearDownClass(cls):
        cls.collector.session_manager.delete()

    def check_if_value_stored(self, dev, param_name):
        """ TestCollector: Check if stored value of parameter equal
            to current value.
        """
        stored = self.collector.db_op_collected.get_times_values(
            dev.name, param_name)[0][1]  # Most recent value in db
        current = dev.params_dict[param_name].value
        self.assertEqual(stored, current)

    def test_collect_localhost(self):
        """ TestCollector: Collect data from localhost. """
        dev_name = 'localhost_one_param'
        self.collector.collector_loop(dev_names=[dev_name], times=1)
        self.check_if_value_stored(self.context.devices[dev_name],
                                   'maxProcesses')

    def test_number_of_records(self):
        """ TestCollector: Check, that valid number of records is added to
            database.
        """
        dev_name = 'localhost_records'
        param_name = 'maxProcesses'
        self.collector.collector_loop(dev_names=[dev_name], times=1)
        records = self.collector.db_op_collected.get_times_values(
            dev_name, param_name)
        self.assertGreater(len(records), 0, records)


class TestTimedCollector(unittest.TestCase):
    """ Test collector class: """

    @classmethod
    def setUpClass(cls):
        """ Create database. """
        context = Context()
        cls.dev_name = 'coll_timed_dev'
        cls.dev = Device(cls.dev_name, cls.dev_name, 'snmp', [])
        cls.dev_dict = {cls.dev_name: cls.dev}
        cls.dev.params_dict['par1'] = deepcopy(parameters['ifNumber'])
        cls.dev.params_dict['par2'] = deepcopy(parameters['ifNumber'])
        cls.dev.params_dict['par1'].collect_interval = 2
        cls.dev.params_dict['par1'].name = 'par1'
        cls.dev.params_dict['par2'].collect_interval = 4
        cls.dev.params_dict['par2'].name = 'par2'
        context.devices = {cls.dev.name: cls.dev}
        context.general_devices = {cls.dev.name: GeneralDevice(
            cls.dev_name, '', '', [cls.dev_name], context)}
        context.parameters['par1'] = cls.dev.params_dict['par1']
        context.parameters['par2'] = cls.dev.params_dict['par2']

        cls.db_name = 'test_timed_collector'
        db.SessionManager.create_db(cls.db_name)
        cls.collector = Collector(cls.db_name, context, 10)
        cls.collector.db_op_collected.create_tables(cls.dev_dict)
        cls.collector.db_op_system.create_tables(cls.dev_dict)

    @classmethod
    def tearDownClass(cls):
        cls.collector.session_manager.delete()

    def test_timed_collector(self):
        """ TestCollector: Handle parameters with diff. collect_interval. """
        self.dev.params_dict['par1'].last_collected = 0
        self.dev.params_dict['par2'].last_collected = 0
        cur_time = 1
        self.collector.collect([self.dev], cur_time)
        records1 = self.collector.db_op_collected.get_times_values(
            self.dev_name, 'par1')
        records2 = self.collector.db_op_collected.get_times_values(
            self.dev_name, 'par2')
        self.assertEqual(len(records1), 1, records1)
        self.assertEqual(len(records2), 1, records2)

        cur_time = 3
        self.collector.collect([self.dev], cur_time)
        records1 = self.collector.db_op_collected.get_times_values(
            self.dev_name, 'par1')
        records2 = self.collector.db_op_collected.get_times_values(
            self.dev_name, 'par2')
        self.assertEqual(len(records1), 2, records1)
        self.assertEqual(len(records2), 1, records2)

        cur_time = 5
        self.collector.collect([self.dev], cur_time)
        records1 = self.collector.db_op_collected.get_times_values(
            self.dev_name, 'par1')
        records2 = self.collector.db_op_collected.get_times_values(
            self.dev_name, 'par2')
        self.assertEqual(len(records1), 3, records1)
        self.assertEqual(len(records2), 2, records2)

        cur_time = 6
        self.collector.collect([self.dev], cur_time)
        records1 = self.collector.db_op_collected.get_times_values(
            self.dev_name, 'par1')
        records2 = self.collector.db_op_collected.get_times_values(
            self.dev_name, 'par2')
        self.assertEqual(len(records1), 3, records1)
        self.assertEqual(len(records2), 2, records2)


    def test_get_parameters_to_collect(self):
        """ TestCollector: Decide when parameters will be collected.
            Get device with 2 parameters
                one with collect_interval=2
                second with collect_interval=4,
            Advance time and see, if method get_parameters_to_collect decide
            what to collect right.

            Here given table of current time and last collected field of
            parameters. Last collected marked as +, if parameter should be
            collected right now.

            -----+----+-----
            time | p1 | p2
            -----+----+-----
              1  | 1+ | 1+
              3  | 3+ | 1
              5  | 5+ | 5+
              6  | 5  | 5
            -----+----+-----
        """
        def get_params_to_collect(cur_time):
            """ Return list of parameter names to collect this time. """
            return [par.name for par in Collector.get_parameters_to_collect(
                self.dev, cur_time)]

        cur_time = 1
        params_to_collect = get_params_to_collect(cur_time)
        self.assertTrue('par1' in params_to_collect,
                        params_to_collect)
        self.assertTrue('par2' in params_to_collect,
                        params_to_collect)
        self.dev.params_dict['par1'].last_collected = cur_time
        self.dev.params_dict['par2'].last_collected = cur_time

        cur_time = 3
        params_to_collect = get_params_to_collect(cur_time)
        self.assertTrue('par1' in params_to_collect,
                        params_to_collect)
        self.assertTrue('par2' not in params_to_collect,
                        params_to_collect)
        self.dev.params_dict['par1'].last_collected = cur_time

        cur_time = 5
        params_to_collect = get_params_to_collect(cur_time)
        self.assertTrue('par1' in params_to_collect,
                        params_to_collect)
        self.assertTrue('par2' in params_to_collect,
                        params_to_collect)
        self.dev.params_dict['par1'].last_collected = cur_time
        self.dev.params_dict['par2'].last_collected = cur_time

        cur_time = 6
        params_to_collect = get_params_to_collect(cur_time)
        self.assertTrue('par1' not in params_to_collect,
                        params_to_collect)
        self.assertTrue('par2' not in params_to_collect,
                        params_to_collect)
