#!/usr/bin/env python3

# This is proprietary software.
# part of cluster monitoring project.
# PEP8 code style used, python version 3
#
# authors: dmitry khodakov <dmitryhd@gmail.com>

""" Test Suite for download module. """

import unittest

from nms.core.download import DownloadManager
from nms.core.context import ContextCreator


class TestDownloadManager(unittest.TestCase):
    """ Test Download manager. """

    def setUp(self):
        self.dmanager = DownloadManager()
        context = ContextCreator('localhost').from_file()
        self.dev = context.devices['laptop']
        self.param_name = 'cpuUser'
        for par in self.dev.params_dict.values():
            par.value = None

    def test_snmp_get_single(self):
        """ TestDownloadManager: Snmp get single parameter real test. """
        self.dmanager.download(self.dev, self.dev.params_dict[self.param_name])
        self.assertNotEqual(self.dev.params_dict[self.param_name].value, None)

    def test_snmp_get_single_virtual(self):
        """ TestDownloadManager: Snmp get single parameter virtual test. """
        dmanager = DownloadManager(is_testmode=True)
        dmanager.download(self.dev, self.dev.params_dict[self.param_name], 42)
        self.assertEqual(self.dev.params_dict[self.param_name].value, 42)

    @unittest.skip('fix by dmitry')
    def test_snmp_get_multiple(self):
        """ TestDownloadManager: Snmp get multiple parameters real test. """
        self.dmanager.download_multiple_params(
            self.dev, self.dev.params_dict.values())
        for par in self.dev.params_dict.values():
            if par.protocol == 'snmp':
                self.assertNotEqual(par.value, None, par.name)

    def test_parse_snmp_string(self):
        """ TestDownloadManager: Test regular expression for snmp. """
        checklist = {"just ordinary string": None,
                     "UCD-SNMP-MIB::ssCpuUser.0 = INTEGER: 8\n": '8',
                     ".1.3.6.1.4.1.2021.100.10.0 = INTEGER: 0\n": '0',
                     '.1.3.6.1.4.1.2021.101.2.0 = STRING: snmp\n': 'snmp'}
        for inp, expected in checklist.items():
            out = DownloadManager.parse_output(r':\s(.+)\n', inp)
            self.assertEqual(out, expected)

    def test_parse_ipmi_output(self):
        """ TestDownloadManager: Test regular expression for ipmi. """
        ipmi_out = "CPU1 Temperature | 51.000 | degrees C | nr | 0.000 "
        ipmi_out += "| 0.000 | 0.000 | 80.000 | 85.000 | 91.000 \n TR1 "
        ipmi_out += "Temperature | 0.000 | degrees C | nr | 0.000 | 0.000 "
        ipmi_out += "| 0.000 | 70.000 | 75.000 | 80.000"
        checklist = {ipmi_out: ("51.000", "CPU1 Temperature"),
                     "VCORE1 | 1.1 |": ("1.1", "VCORE1"),
                     "+3.3VSB | 20.000 |": ("20.000", "3.3VSB"),
                     "sdfvsdf xx": (None, "sdfvsdf xx"),}
        for string, expected_value in checklist.items():
            regexp = r'{}\D*\|\D*(\d+\.*\d+)\D*\|'.format(expected_value[1])
            parsed = DownloadManager.parse_output(regexp, string)
            self.assertEqual(parsed, expected_value[0])

