#!/usr/bin/env python3

""" Check for system services on certain server. """

import subprocess
import re
import nms.utility as utility


class EnvironmentChecker(object):
    """ Configure it with server hostname, password and login and it will give
        you dict of server services states.
        Usage: EnvironmentChecker().states() = 
               {'xinetd': True, 'ssh': False, ...}
    """
    def __init__(self):
        self.hostname = 'sr'
        self.user = 'user'
        self.password = '111111'
        self.services = {'xinetd': {'command': 'service xinetd status &> /dev/null; echo $?;',
                                    'regexp': r'0'},
                         'nfs': {'command': 'service nfs-server status &> /dev/null; echo $?;',
                                 'regexp': r'0'},
                         'ssh': {'command': 'service sshd status &> /dev/null; echo $?;',
                                 'regexp': r'0'},
                         'mpi': {'command': 'ps aux | grep mpi | grep -v grep',
                                 'regexp': r'\w+'},
                         'bx': {'command': 'ps aux | grep bx_start.py | grep -v grep',
                                'regexp': r'\w+'},
                         'suppz': {'command': 'ps aux | grep bx_start.py | grep -v grep',
                                   'regexp': r'\w+'},
                        }

    def states(self):
        """ Return dict like this: {'xinetd': True, 'ssh': False, ...} """
        service_states = {}
        for service, checker in self.services.items():
            command = 'ssh {user}@{host} "{command}"'.format(
                user=self.user, host=self.hostname, command=checker['command'])
            try:
                out = subprocess.check_output(command, shell=True).decode('utf8')
                is_service_ok = bool(re.findall(checker['regexp'], out))
            except subprocess.CalledProcessError:
                is_service_ok = False
            service_states[service] = is_service_ok
        return service_states

        
def get_services_states():
    return EnvironmentChecker().states()


def print_state(service_states):
    for service in sorted(service_states):
        service_status = '{:10} {:10}'.format(service, '[OK]' if service_states[service] else '[FAIL]')
        utility.log_color(service_status, 'green' if service_states[service] else 'red', 'warn')


if __name__ == '__main__':
    states = get_services_states()
    print_state(states)
