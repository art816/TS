#!/usr/bin/env python3

# This is proprietary software.
# part of cluster monitoring project.
# PEP8 code style used, python version 3
#
# authors: dmitry khodakov <dmitryhd@gmail.com>

# pylint: disable=too-few-public-methods, super-init-not-called, broad-except

""" Must run test check of hardware on local machine. """

import os
import re
import sys
import traceback
import subprocess


class Check(object):
    """ Abstract class for other checks.
        Contain command and regexp to get result.
        Store check result in status.
    """
    def __init__(self):
        self.command = ""
        self.status_regexp = ""
        self.passed_indicator = ""
        self.status = False
        self.result = ""

    def run(self):
        """ Run command and search for regexp.
            Return status (is passed indicator in output of command).
        """
        self.change_dir()
        self.result = ""
        try:
            out = subprocess.check_output(self.command,
                                          shell=True,
                                          stderr=subprocess.STDOUT,
                                          universal_newlines=True)
            self.result = re.search(self.status_regexp, out).groups()[0]
        except Exception:
            print(traceback.format_exc())
            print(sys.exc_info()[0])
            self.status = False
        else:
            self.status = self.is_passed()
        return self.status

    @staticmethod
    def change_dir():
        """ Cd to directory with binaries.
            Default is directory of this module.
        """
        abspath = os.path.abspath(__file__)
        dname = os.path.dirname(abspath)
        os.chdir(dname)

    def is_passed(self):
        """ Return True, if result is valid. """
        return bool(re.search(self.passed_indicator, self.result))


class CpuCheck(Check):
    """ Runs linpack on local machine. """
    def __init__(self):
        self.command = 'cat ./bin/linpack_params | ./bin/linpack'
        self.status_regexp = r'(Residual checks .*)\n'
        self.passed_indicator = 'PASSED'
        self.status = False


class GpuNumCheck(Check):
    """ Get number of videocards on this machine"""
    def __init__(self):
        self.command = './bin/clinfo '
        self.command += '| grep CL_DEVICE_TYPE_GPU | wc -l'
        self.status_regexp = r'(\d+)'
        self.passed_indicator = '2'
        self.status = False


class GpuCheck(Check):
    """ Runs opencl test on local machine on specific card. """
    def __init__(self, card_number=0):
        self.card_number = card_number
        self.command = './bin/compute_on_gpu -t -i 50 -d %d' % card_number
        self.command += '| grep CL_DEVICE_TYPE_GPU | wc -l'
        self.status_regexp = r'(Output)'
        self.passed_indicator = 'Output'
        self.status = False


class DiskCheck(Check):
    """ Runs opencl test on local machine on specific card. """
    def __init__(self, disk_mount_point):
        self.tmp_file_name = 'disk_speed_test.tmp'
        self.disk_mount_point = disk_mount_point
        self.command = 'dd if=/dev/zero of=%s bs=8k count=2500' % os.path.join(
            disk_mount_point, self.tmp_file_name)
        self.status_regexp = r'(\d+\,*\d*)\s+.B/s'
        self.passed_indicator = r'\d'
        self.status = False


class SshServiceCheck(Check):
    """ Checks system services SshServiceCheck"""
    def __init__(self, server_ip, ssh_command):
        self.command = 'ssh {} '
        self.status_regexp = r'(Output)'
        self.passed_indicator = 'Output'
        self.status = False
