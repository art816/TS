#!/usr/bin/env python3

# This is proprietary software.
# Part of cluster monitoring project.
# PEP8 codestyle used, python version 3.
#
# authors: artem pilkevich, dmitriy khodakov

# pylint: disable=too-few-public-methods

""" This module contain Alerts and OldAlerts which are pure database objects.
    All logic, considering alerts creation and maintaining goes in
    alert_handler.
"""

import time
import sqlalchemy as alch
from sqlalchemy.ext.declarative import declarative_base
from datetime import datetime

import nms.config as cfg

BASE = declarative_base()


class AbstractAlert(object):
    """ Abstract alert class. """
    id = alch.Column(alch.Integer, primary_key=True)
    # Level can be err_min, warn_min, warn_max, err_max
    level = alch.Column(alch.TEXT, nullable=False)
    start_time = alch.Column(alch.Integer, nullable=False)
    device_name = alch.Column(alch.TEXT, nullable=False)
    param_name = alch.Column(alch.TEXT, nullable=False)
    message = alch.Column(alch.TEXT, nullable=True)
    LEVEL_DESCRIPTIOON = {
        'err_min': 'критически низкое значение',
        'warn_min': 'низкое значение',
        'warn_max': 'высокое значение',
        'err_max': 'критически высокое значение',
        1: 'значение'
    }

    def get_start_time(self):
        """ Return start time of alert in cfg.TIME_FORMAR. """
        return datetime.fromtimestamp(self.start_time).strftime(
            cfg.TIME_FORMAT)

    def set_message(self):
        """ Fill message field, according to device_name and param_name. """
        if 'online' in self.param_name:
            self.message = 'Устройство недоступно по сети'
        elif self.level in self.LEVEL_DESCRIPTIOON:
            self.message = self.LEVEL_DESCRIPTIOON[self.level]

    def __repr__(self):
        return 'Alert: dev:{} par:{} message:{} level:{} start:{}'.format(
            self.device_name, self.param_name, self.message, self.level,
            self.start_time)

    def to_dict(self):
        """ Return alert as dict for jsonification in web interface. """
        return {'level': self.level, 'start_time': self.start_time, 
                'device_name': self.device_name, 'param_name': self.param_name,
                'message': self.message}


class Alert(AbstractAlert, BASE):
    """ Constructor table cfg.DB_ALERTS_TABLE. """
    __tablename__ = cfg.DB_ALERTS_TABLE

    def __init__(self, device_name, param_name, level):
        self.device_name = device_name
        self.param_name = param_name
        self.start_time = int(time.time())
        self.level = level
        self.set_message()


class OldAlert(AbstractAlert, BASE):
    """ Constructor table cfg.DB_OLD_ALERTS_TABLE. """
    __tablename__ = cfg.DB_OLD_ALERTS_TABLE
    end_time = alch.Column(alch.Integer, nullable=False)

    def __init__(self, alert):
        self.device_name = alert.device_name
        self.param_name = alert.param_name
        self.message = alert.message
        self.start_time = alert.start_time
        self.level = alert.level
        self.end_time = int(time.time())

    def get_end_time(self):
        """ Return end time of alert in cfg.TIME_FORMAT. """
        return datetime.fromtimestamp(self.end_time).strftime(cfg.TIME_FORMAT)

    def to_dict(self):
        """ Return alert as dict for jsonification in web interface. """
        return {'level': self.level, 'start_time': self.start_time, 
                'device_name': self.device_name, 'param_name': self.param_name,
                'message': self.message, 'end_time': self.end_time}


