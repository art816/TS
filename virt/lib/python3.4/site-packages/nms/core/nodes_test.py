#!/usr/bin/env python3

# This is proprietary software.
# part of cluster monitoring project.
# PEP8 code style used, python version 3
#
# authors: dmitry khodakov <dmitryhd@gmail.com>
#
# pylint: disable=W0232, R0903, logging-format-interpolation

""" This module is the main part of computational nodes test.
    It tests nodes for network availability and GPU card state.
    Can be called from command line or web interface.
    Should give result in format:
    {DeviceName : [ping_state, GPU_state, GPU_fault_list]}.
"""

# TODO this file needed only for backward compatibility with bussol.
# need to be replaced

import re
import logging

from nms.nmsconfig.device_config import ContainersStorage
from nms.core.download import DownloadManager
import nms.utility as utility
import nms.config as cfg


LOG = logging.getLogger('devices_log')


def nodes_check(context):
    """ Check and return result in form of dictinary """
    node_names = list(context.devices.keys())

    results = {}
    ping_functions = []
    ping_arguments = []
    for node_name in node_names:
        ping_functions.append(utility.ping)
        ping_arguments.append([context.devices[node_name].ip_addr])
    res = utility.run_in_parallel_with_res(ping_functions, ping_arguments)
    dmanager = DownloadManager()
    for current_node_index in range(len(res)):
        node_name = node_names[current_node_index]
        results[node_name] = []
        results[node_name].append(bool(res[current_node_index]))
        if node_name in ContainersStorage['calc_units']:
            results[node_name].append('gpu')
            results[node_name].append([])
            dmanager.download_multiple_params(context.devices[node_name])
            videocard_status = [True] * cfg.GPU_NUMBER
            for param in context.devices[node_name].parameters:
                if param.value is None and param.name != 'online':
                    LOG.error('fail to get param {} on device {}'.format(
                        param, context.devices[node_name]))
                    for gpu_num in range(cfg.GPU_NUMBER):
                        if re.match('GPU%d' % gpu_num, param.name):
                            videocard_status[gpu_num] = False
                            break
            for gpu_num in range(cfg.GPU_NUMBER):
                results[node_name][2].append(
                    ['Графический ускоритель %s' % (gpu_num + 1),
                     videocard_status[gpu_num]])
        else:
            results[node_names[current_node_index]].append('other')
            results[node_names[current_node_index]].append([])
    return {context.devices[node_name].full_name:
            results[node_name] for node_name in results.keys()}


def check_mount_point(context):
    """ return true, if mountpoint is accessible """
    return utility.run_command_with_timeout(
        ['showmount', '-e', context.devices['MonitoringServer'].ip_addr],
        cfg.MOUNT_POINT_TIMEOUT)


def check_dhcp():
    """ Return true, if dhcp enabled. """
    command = ['service', 'dhcpd', 'status']
    out = utility.run_command_with_timeout(command, cfg.DHCP_CHECK_TIMEOUT)
    if re.search(r'running', out):
        return True
    return False


def print_check_to_console(res, context):
    """ Fancy print function. """
    class Bcolors:
        """ Console colors. """
        HEADER = '\033[95m'
        OKBLUE = '\033[94m'
        OKGREEN = '\033[92m'
        WARNING = '\033[93m'
        FAIL = '\033[91m'
        ENDC = '\033[0m'

    dev_names = sorted(res.keys())
    print(Bcolors.WARNING + "-"*50 + " Доступность по сети " \
        + "-"*50+Bcolors.ENDC)
    for serv_name in dev_names:
        if res[serv_name][0]:
            print(Bcolors.OKGREEN + '%50s\t[ ok ]' % serv_name + Bcolors.ENDC)
        else:
            print(Bcolors.FAIL + '%50s\t[ не доступен ]'\
                % serv_name + Bcolors.ENDC)

    print('\n\n')
    print_str = Bcolors.WARNING + "-"*30
    print_str += " Проверка доступности графических процессоров"
    print_str += " на вычислительных узлах " + "-" * 30 + Bcolors.ENDC
    print(print_str)
    for serv_name in dev_names:
        if res[serv_name][1] != 'gpu':
            continue
        num = re.search(r'(\d+)', serv_name).groups()[0]
        print('Вычислительный узел: %s' % num)
        for video_status in res[serv_name][2]:
            if video_status[1]:
                print(Bcolors.OKGREEN + '\t%s: [ OK ]' % video_status[0]\
                    + Bcolors.ENDC)
            else:
                print(Bcolors.FAIL + '\t%s: [ НЕДОСТУПЕН ]' % \
                    video_status[0] + Bcolors.ENDC)

    nfsres = check_mount_point(context)
    print('\n\n')
    print(Bcolors.WARNING + "-"*50 + " Проверка NFS " + "-"*50 +Bcolors.ENDC)
    if not nfsres:
        print_str = Bcolors.FAIL
        print_str += 'NFS на сервере {}: [ Не доступно ]. '
        print_str += 'Загрузка по сети OS Linux недоступна.' + Bcolors.ENDC
    else:
        print_str = Bcolors.OKGREEN
        print_str += 'NFS на сервере {}: [ OK ]'
        print_str += 'Загрузка по сети возможна.' + Bcolors.ENDC
    print(print_str.format(context.devices['MonitoringServer'].ip_addr))


if __name__ == '__main__':
    #res = nodes_check()
    #res = {'Вычислительный узел 1': [True, 'gpu', ['']]}
    from nms.core.context import ContextCreator
    context = ContextCreator('buer').from_file()
    scan_res = {gd.full_name: [True, 'xx', []] for gd in context.general_devices.values()}
    print_check_to_console(scan_res, context)
