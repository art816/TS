#!/usr/bin/env python3

""" This module contains EmergencyDisabler class for GeneralDevice.
    It will disable device if temperature is dangerously high. 
"""

import nms.utility as ut

class EmergencyChecker(object):
    """ EmergencyDisabler: usage example:
        dev = GeneralDevice()...
        disabler = EmergencyDisabler(dev)
        disabler.check()
        disabler.check()
        # here goes shutdown order
    """
    def __init__(self, gdev):
        self.gdev = gdev
        self.enabled = True  # set this to False to evade check
        self.temperature_parameters = []
        self.max_temp = 75
        self.consecutive_fails = 0  # set this value in check()
        self.max_consecutive_fails = 2
        self.is_last_failed = False
        self.do_log = True

    def check(self):
        """ Set internal state. """
        if not self.enabled:
            self._record_success()
        for important_param in self.temperature_parameters:
            param = self.gdev.params_dict[important_param]
            if param.value is not None and param.value > self.max_temp:
                if self.do_log:
                    ut.log_color(('Emergency checker got a high temperature of {}'
                                  ' parameter {}, value = {}').format(
                                      self.gdev.name, param.name, param.value),
                                 'red', 'err')
                self._record_fail()
                break
        else:
            self._record_success()

    def do_need_to_disable(self):
        return self.consecutive_fails >= self.max_consecutive_fails

    def _record_fail(self):
        self.consecutive_fails += 1
        self.is_last_failed = True

    def _record_success(self):
        """docstring for _record_success"""
        self.consecutive_fails = 0
        self.is_last_failed = False
        

class GlobalEmergencyChecker(object):
    """ GlobalEmergencyChecker: contains dict of gdev_name: EmergencyDisabler
        has public method check, and number of consecutive fails

        global_emergency = GlobalEmergencyChecker(context,
            cfg.CRITICAL_TEMP_PARAMETERS, cfg.CRITICAL_DEV_LIST)
        # CRITICAL_TEMP_PARAMETERS = ['GPU_TEMP_001', 'cpuTepm' ...]
        global_emergency.check()
        global_emergency.check()
        # here goed shutdown order for all devices with high temps
    """
    def __init__(self, context, critical_param_list, gdev_list):
        self.checkers = {gdev_name:
                         EmergencyChecker(context.general_devices[gdev_name]) for gdev_name in gdev_list}
        for checker in  self.checkers.values():
            checker.temperature_parameters = critical_param_list
            checker.do_log = False
        self.failed_devices = []

    def check(self):
        """ check: set internal state of all."""
        failed = []
        for checker in self.checkers.values():
            print(checker.gdev)
            checker.check()
            if checker.do_need_to_disable():
                failed.append(checker.gdev.name)
        self.failed_devices = sorted(failed)

