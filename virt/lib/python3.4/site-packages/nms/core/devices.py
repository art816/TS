#!/usr/bin/env python3

# This is proprietary software.
# Part of cluster monitoring project.
# PEP8 codestyle used, python version 3.
#
# authors: dmitry khodakov <dmitryhd@gmail.com>

# pylint: disable=star-args, too-few-public-methods, too-many-arguments
# pylint: disable=too-many-instance-attributes

""" Module containing Device class, which contains various parameters. """

import copy
from collections import OrderedDict

import nms.core.parameters as pars
import nms.config as cfg


class Device(object):
    """ Representation of device, containing parameters, and information
        for downloading data.
        Contains dictionary of parameters.
    """
    def __init__(self, name, full_name, protocol, param_name_list,
                 protocol_version='v2c', is_bmc=False):
        self.name = name
        self.full_name = full_name
        self.protocol = protocol
        self.params_dict = OrderedDict()
        for param_name in sorted(param_name_list):
            self.params_dict[param_name] = copy.deepcopy(
                pars.parameters[param_name])

        self.ip_addr = cfg.addressing[self.name] if name in cfg.addressing \
                       else '0.0.0.0'
        # Must make difference between server and serverBMC in
        # web interface, so:
        for param_name in self.params_dict:
            if param_name == 'online':
                self.params_dict[param_name].desc += ' ' + self.full_name
        self.is_online = False
        self.is_bmc = is_bmc
        self.protocol_version = protocol_version

    def __repr__(self):
        return "Dev: {}".format(self.name)

    def calculate_parameters(self):
        """ Need to be called after init_all_calculated_parameters.
            Just set values of all calculated params according to other values.
        """
        for param in self.params_dict.values():
            if param.is_calculated:
                param.link_to_device_to_calculate(self)
                param.calculate()


class GeneralDevice(object):
    """ Representation of meta-device, containing group of devices
        for example - MonitoringServer and MonitoringServerBMC
    """
    def __init__(self, name, full_name, description, device_names,
                 context=None):
        self.name = name
        self.full_name = full_name
        self.description = description
        self.devices = [context.devices[name] for name in device_names]
        self.params_dict = OrderedDict()
        for device in self.devices:
            for par_name, param in device.params_dict.items():
                if not (par_name == 'online' and device.is_bmc):
                    self.params_dict[par_name] = param
        # List of parameters visible in web interface.
        self.visible_parameters = []
        for param in self.params_dict.values():
            if param.visible:
                self.visible_parameters.append(param)
        self.param_groups = OrderedDict()
        self.is_online = True
        self.do_have_alerts = False
        self.is_in_group = False
        self.main_parameters = ['online']  # To plot in device page on web.
        for device in self.devices:
            if device.is_bmc:
                self.ip_addr_bmc = device.ip_addr
            else:
                self.ip_addr = device.ip_addr

    def set_online_status(self):
        """ Get from devices last status of every device contaided in GD. """
        for device in self.devices:
            #  BMC should always be online
            if device.protocol == 'ipmi':
                continue
            self.is_online = device.is_online
            break  # one part of GD is ok.

    def __repr__(self):
        return '{} {}'.format(self.name, self.params_dict)


class DeviceContainer(object):
    """ Class, which contains group of general devices in web. """
    def __init__(self, name, full_name, descr, context, leaf=False):
        self.name = name
        self.full_name = full_name
        self.descr = descr
        self.gdevices = context.general_devices
        self.leaf = leaf
        self.children = []
        self.do_have_alerts = False
        self.is_online = False

    def set_online_status(self):
        """ Set status for all devices in group. """
        if self.leaf:
            self.is_online = self.gdevices[self.name].is_online
            return
        self.is_online = True
        for child in self.children:
            if not child.is_online:
                self.is_online = False
                break

    def set_alert_status(self):
        """ Set status for all devices in group. """
        if self.leaf:
            self.do_have_alerts = self.gdevices[self.name].do_have_alerts
            return
        self.do_have_alerts = False
        for child in self.children:
            if child.do_have_alerts:
                self.do_have_alerts = True
                break


def find_dev_name(gd_name, param_name, context):
    """ Get device name by general device name and paramter name. """
    for dev in context.general_devices[gd_name].devices:
        if param_name in dev.params_dict:
            return dev.name
    return None

