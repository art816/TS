#!/usr/bin/env python3

# This is proprietary software.
# Part of cluster monitoring project.
# PEP8 codestyle used, python version 3.
#
# authors: dmitry khodakov <dmitryhd@gmail.com>

# pylint: disable=star-args, too-few-public-methods

""" Module contains context, which holds devices, general devices, device
    containers and used parameters.
"""
import sys

import nms.core.parameters as pars
import nms.config as cfg


class Context(object):
    """ This class stores devices, parameters and general_devices in one place.
        It can initialize them from file or by hand. It should be used to pass
        context to collector, web, tests and other modules whenever possible.
    """
    def __init__(self):
        self.devices = {}
        self.parameters = {}
        self.general_devices = {}
        self.device_containers = {}
        self.parameters = pars.parameters

    def set_status_of_device_containers(self):
        """ Create structure for device containers and set online status. """
        # leafs first
        for dc_name in self.device_containers.keys():
            container = self.device_containers[dc_name]
            if container.leaf:
                container.set_online_status()
                container.set_alert_status()
        for dc_name in self.device_containers.keys():
            container = self.device_containers[dc_name]
            if not container.leaf:
                container.set_online_status()
                container.set_alert_status()


class ContextCreator(object):
    """ May create various contexts from config files. 
        Example: ContextCreator('buer').from_file()
    """

    def __init__(self, name='localhost'):
        self.name = name
        self.conf_file_name = cfg.CONTEXT_PATH[name]
        self.conf = None  # config module

    def connect_module(self, fname):
        """ Import config by filename and initialize self.conf with module. """
        __import__(fname)
        self.conf = sys.modules[fname]

    def from_file(self):
        """ Connect module by filename.
            Return Context from self.conf.create_context.
        """
        self.connect_module(self.conf_file_name)
        return self.conf.create_context()

