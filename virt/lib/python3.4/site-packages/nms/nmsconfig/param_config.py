#!/usr/bin/env python3

# This is proprietary software.
# Part of cluster monitoring project.
# PEP8 codestyle used, python version 3.
#
# authors: dmitry khodakov <dmitryhd@gmail.com>
# date: 29.10.2014
#
# pylint: disable=C0330, C0326, C0301, C0103
""" List of all parameters. """
import nms.config as cfg
from nms.nmsconfig.param_group_config import MaxSwitchPorts, MaxProcNumber
# ---------------------------------------------------------------------------
# This value store initial set of all parameters to be stored by any device.
# parameters itself initialized in management/commands/load_parameters.py
# and stored in database ../site.db. If change any parameter, to take effect
# you need to rewrite database by running: ../management.py load_parameters
# ---------------------------------------------------------------------------
param_init = []
# ---------------------------------------------------------------------------
# Boudaries for parameters
# ---------------------------------------------------------------------------
# in V
min_voltage_err   = 0.5
min_voltage_warn  = 0.6
max_voltage_warn  = 1.488
max_voltage_err   = 1.52

# in C
min_err_cpu_temp  = 0
min_warn_cpu_temp = 10
max_warn_cpu_temp = 80
max_err_cpu_temp  = 85

# in rpm
min_err_fan_speed  = 640
min_warn_fan_speed = 720
max_warn_fan_speed = 18000
max_err_fan_speed  = 18960

min_err_psu_fan_speed  = 230
min_warn_psu_fan_speed = 460
max_warn_psu_fan_speed = 10005
max_err_psu_fan_speed  = 14950

# in C
min_err_outer_temp  = 10
min_warn_outer_temp = 15
max_warn_outer_temp = 30
max_err_outer_temp  = 35

# in %
min_err_outer_humid   = 0
min_warn_outer_humid  = 5
max_warn_outer_humid  = 85
max_err_outer_humid   = 90

# functions to calculate values of calculated parameters:
div = '/'
mul = '*'
substr = '-'
summ = '+'

raid_temp_regexp = r': ["\w\s-]+: (\d+)'
default_ipmi_regexp = r'{}\D*\|\D*(\d+\.*\d+)\D*\|'
ipmi_regexp = r'{} *\| ([0-9\.]*)'

value_multipliers = {'kb_to_gb' : 1/(1024.0*1024.0),
                     'b_to_gb'  : 1/(1024*1024*1024.0),
                     'to_percent'  : 100,
                     '01A_to_A' : 10.0,
                     'amper_to_watt' : 220,
                    }

percent_visual_range = [0, 100]

# Server parameters
# ---------------------------------------------------------------------------
param_init.append(dict(name="memTotalReal",
                        full_name="Общий объём памяти",
                        desc="Объём физической памяти на сервере",
                        _type="float",
                        identifier=".1.3.6.1.2.1.25.2.3.1.5.1",
                        protocol="snmp",
                        units="КБ",
                        visible=False))

param_init.append(dict(name="memOccupiedReal",
                        full_name="Объём занятой памяти",
                        desc="Объём занятой памяти на сервере",
                        _type="float",
                        identifier=".1.3.6.1.2.1.25.2.3.1.6.1",
                        protocol="snmp",
                        units="КБ",
                        visible=False))

param_init.append(dict(name="memCachedReal",
                        full_name="Объём кэшированной памяти",
                        desc="Объём кэшированной памяти на сервере",
                        _type="float",
                        identifier=".1.3.6.1.2.1.25.2.3.1.5.7",
                        protocol="snmp",
                        units="КБ",
                        visible=False))

param_init.append(dict(name="memFreeReal",
                       full_name="Свободная память",
                       desc="Объём свободной оперативной памяти в ГБ",
                       _type="float",
                       identifier="",
                       protocol="calc",
                       units="ГБ",
                       is_calculated=True,
                       names_of_params_to_calculate=['memTotalReal', 'memOccupiedReal', 'memCachedReal'],
                       list_of_function_to_calculate=[substr, summ],
                       calculation_const=value_multipliers['kb_to_gb']))

param_init.append(dict(name="memFreePercent",
                       full_name="Свободная RAM в процентах",
                       desc="Объём свободной оперативной памяти в процентах",
                       _type="float",
                       identifier="",
                       protocol="calc",
                       units="%",
                       is_calculated=True,
                       names_of_params_to_calculate=['memTotalReal', 'memOccupiedReal',
                                            'memCachedReal', 'memTotalReal'],
                       list_of_function_to_calculate=[substr, summ, div],
                       vrange=percent_visual_range,
                       calculation_const=value_multipliers['to_percent']))

param_init.append(dict(name="memOccPercent",
                       full_name="Занятая RAM в процентах",
                       desc="Объём занятой оперативной памяти на сервере",
                       _type="float",
                       identifier="",
                       protocol="calc",
                       units="%",
                       is_calculated=True,
                       names_of_params_to_calculate=['memTotalReal', 'memOccupiedReal',
                                            'memCachedReal', 'memTotalReal'],
                       list_of_function_to_calculate=[substr, summ, div],
                       vrange=percent_visual_range,
                       calculation_const=value_multipliers['to_percent']))

param_init.append(dict(name="cpuUser",
                       full_name="Использование ЦП",
                       desc="Использование ЦП",
                       _type="float",
                       identifier=".1.3.6.1.4.1.2021.11.9.0",
                       protocol="snmp",
                       units="%",
                       vrange=percent_visual_range))

param_init.append(dict(name="diskOccupied",
                        full_name="Занятый объём ЖД",
                        desc="Общий занятый объём ЖД, блок",
                        _type="int",
                        identifier=".1.3.6.1.2.1.25.2.3.1.6.31",
                        protocol="snmp",
                        units="Блок",
                        visible=False))

param_init.append(dict(name="diskBlockSize",
                       full_name="Размер блока",
                       desc="Размер блока ЖД",
                       _type="int",
                       identifier=".1.3.6.1.2.1.25.2.3.1.4.31",
                       protocol="snmp",
                       units="Байт",
                       value_boundaries=(0, 0, None, 512*1024*1024),
                       visible=False))

param_init.append(dict(name="diskOccupiedBytes",
                       full_name="Занятый объйм ЖД",
                       desc="Занятый объём ЖД",
                       _type="float",
                       identifier="",
                       protocol="calc",
                       units="ГБ",
                       is_calculated=True,
                       names_of_params_to_calculate=['diskOccupied', 'diskBlockSize'],
                       list_of_function_to_calculate=[mul],
                       vrange=[0, None],
                       calculation_const=value_multipliers['b_to_gb']))

param_init.append(dict(name="diskTotalBytes",
                       full_name="Объём ЖД",
                       desc="Общий объём ЖД",
                       _type="float",
                       identifier="",
                       protocol="calc",
                       units="ГБ",
                       is_calculated=True,
                       names_of_params_to_calculate=['diskTotal', 'diskBlockSize'],
                       list_of_function_to_calculate=[mul],
                       vrange=[0, None],
                       calculation_const=value_multipliers['b_to_gb']))

param_init.append(dict(name="diskTotal",
                        full_name="Объём ЖД, блок",
                        desc="Общий объём ЖД",
                        _type="int",
                        identifier=".1.3.6.1.2.1.25.2.3.1.5.31",
                        protocol="snmp",
                        units="Блок",
                        visible=False))

# Raid parameters
# ---------------------------------------------------------------------------
raid_oid = [None, '36', '37']
for raid in range(1, 3):
    param_init.append(dict(name="diskBlockSizeRaid{}".format(raid),
                        full_name="Размер блока хранилища №{}".format(raid),
                        desc="Размер блока ФС на хранилище №{}".format(raid),
                        _type="int",
                        identifier=".1.3.6.1.2.1.25.2.3.1.4.{}".format(raid_oid[raid]),
                        protocol="snmp",
                        units="Байт",
                        visible=False))

    param_init.append(dict(name="diskTotalRaid{}".format(raid),
                        full_name="Объём хранилища №{}".format(raid),
                        desc="Общий объём хранилища №{}".format(raid),
                        _type="int",
                        identifier=".1.3.6.1.2.1.25.2.3.1.5.{}".format(raid_oid[raid]),
                        protocol="snmp",
                        units="блок",
                        visible=False))

    param_init.append(dict(name="diskTotalBytesRaid{}".format(raid),
                       full_name="Объём хранилища №{}".format(raid),
                       desc="Общий объём хранилища №{}".format(raid),
                       _type="float",
                       identifier="",
                       protocol="calc",
                       units="ГБ",
                       is_calculated=True,
                       names_of_params_to_calculate=['diskTotalRaid{}'.format(raid), 'diskBlockSizeRaid{}'.format(raid)],
                       list_of_function_to_calculate=[mul],
                       vrange=[0, None],
                       calculation_const=value_multipliers['b_to_gb']))

    param_init.append(dict(name="diskOccupiedRaid{}".format(raid),
                       full_name="Занято на хранилище №{}".format(raid),
                       desc="Общий занятый объём на хранилище №{}".format(raid),
                       _type="int",
                       identifier=".1.3.6.1.2.1.25.2.3.1.6.{}".format(raid_oid[raid]),
                       protocol="snmp",
                       units="блок",
                       value_boundaries=(0, 0, None, None),
                       visible=False))

    param_init.append(dict(name="diskOccupiedBytesRaid{}".format(raid),
                       full_name="Занято на хранилище №{}".format(raid),
                       desc="Общий занятый объём на хранилище №{}".format(raid),
                       _type="float",
                       identifier="",
                       protocol="calc",
                       units="ГБ",
                       is_calculated=True,
                       names_of_params_to_calculate=['diskOccupiedRaid{}'.format(raid), 'diskBlockSizeRaid{}'.format(raid)],
                       list_of_function_to_calculate=[mul],
                       vrange=[0, None],
                       calculation_const=value_multipliers['b_to_gb']))

# IPMI on server
# ---------------------------------------------------------------------------
for num in range(1, 5):
    snum = str(num)
    param_init.append(dict(name="VCORE" + snum,
                           full_name="Напряжение на ядре №" + snum,
                           desc="Напряжение на ядре №" + snum,
                           _type="float",
                           identifier="VCORE" + snum,
                           protocol="ipmi",
                           units="В",
                           reg_expression=ipmi_regexp.format("VCORE" + snum),
                           value_boundaries=(min_voltage_err,
                                                       min_voltage_warn,
                                                       max_voltage_warn,
                                                       max_voltage_err),
                       visible=False))

for num in range(1, 5):
    snum = str(num)
    param_init.append(dict(name="CpuTemp" + snum,
                           full_name="Температура ЦП №" + snum,
                           desc="Температура ЦП №" + snum,
                           _type="float",
                           identifier="CPU{} Temperature".format(snum),
                           protocol="ipmi",
                           units="°C",
                           reg_expression=ipmi_regexp.format("CPU" + snum + " Temperature"),
                           value_boundaries=(min_err_cpu_temp,
                                                       min_warn_cpu_temp,
                                                       max_warn_cpu_temp,
                                                       max_err_cpu_temp)))

for psu_num in range(1, 3):
    for fan_num in range(1, 3):
        param_init.append(dict(name="PSU{} Fan{}".format(psu_num, fan_num),
                       full_name="Вентилятор №{} БП №{}".format(fan_num, psu_num),
                       desc="Скорость вращения вентилятора №{} БП №{}".format(fan_num, psu_num),
                       _type="float",
                       identifier="PSU{} Fan{}".format(psu_num, fan_num),
                       protocol="ipmi",
                       units="об/мин",
                       reg_expression=ipmi_regexp.format("PSU{} Fan{}".format(psu_num, fan_num)),
                       value_boundaries=(min_err_psu_fan_speed,
                                                   min_warn_psu_fan_speed,
                                                   max_warn_psu_fan_speed,
                                                   max_err_psu_fan_speed)))


for fan_num in range(1, 6):
    fan_num = str(fan_num)
    param_init.append(dict(name="FRNT_FAN" + fan_num,
                           full_name="Фронтальный вентилятор №" + fan_num,
                           desc="Скорость вращения фронтального вентилятора №" + fan_num,
                           _type="float",
                           identifier="FRNT_FAN" + fan_num,
                           protocol="ipmi",
                           units="об/мин",
                           reg_expression=ipmi_regexp.format("FRNT_FAN" + fan_num),
                           value_boundaries=(min_err_fan_speed,
                                                       min_warn_fan_speed,
                                                       max_warn_fan_speed,
                                                       max_err_fan_speed)))

for cpu_num in range(1, 3):
    cpu_num = str(cpu_num)
    param_init.append(dict(name="CPU{}_DTS_Temp".format(cpu_num),
                           full_name="Температура ЦП №" + cpu_num,
                           desc="Температура ЦП №" + cpu_num,
                           _type="float",
                           identifier="CPU{}_DTS_Temp".format(cpu_num),
                           protocol="ipmi",
                           units="°C",
                           reg_expression=ipmi_regexp.format("CPU{}_DTS_Temp".format(cpu_num)),
                           value_boundaries=(min_err_cpu_temp, min_warn_cpu_temp,
                                                       max_warn_cpu_temp, max_err_cpu_temp)))

param_init.append(dict(name="M_Card_Area_Temp",
                       full_name="Температура M-Card",
                       desc="Температура M-Card",
                       _type="float",
                       identifier="M-Card_Area_Temp",
                       protocol="ipmi",
                       units="°C",
                       reg_expression=ipmi_regexp.format("M-Card_Area_Temp"),
                       value_boundaries=(0, 0, 60, 70)))

param_init.append(dict(name="LAN_Area_Temp",
                       full_name="Температура адаптера ЛВС",
                       desc="Температура адаптера ЛВС",
                       _type="float",
                       identifier="LAN_Area_Temp",
                       protocol="ipmi",
                       units="°C",
                       reg_expression=ipmi_regexp.format("LAN_Area_Temp"),
                       value_boundaries=(0, 0, 70, 80)))

param_init.append(dict(name="MB_Inlet_temp",
                       full_name="Температура на входе",
                       desc="Температура на входе",
                       _type="float",
                       identifier="M/B_Inlet_temp",
                       protocol="ipmi",
                       units="°C",
                       reg_expression=ipmi_regexp.format("M/B_Inlet_temp"),
                       value_boundaries=(0, 0, 40, 45)))

for cpu_num in ['1', '2']:
    for module_num in ['A', 'B', 'C', 'D']:
        param_init.append(dict(name="CPU{}_DIMM_{}0".format(cpu_num, module_num),
                       full_name="Температура модуля памяти {} процессора №{}".format(module_num, cpu_num),
                       desc="Температура модуля памяти {} процессора №{}".format(module_num, cpu_num),
                       _type="float",
                       identifier="CPU{}_DIMM_{}0".format(cpu_num, module_num),
                       protocol="ipmi",
                       units="°C",
                       reg_expression=ipmi_regexp.format("CPU{}_DIMM_{}0".format(cpu_num, module_num)),
                       value_boundaries=(0, 0, 75, 85)))


for cpu_num in ['0', '1']:
    param_init.append(dict(name="CPU{}_VCore".format(cpu_num),
                       full_name="Напряжение ядра ЦП №" + cpu_num,
                       desc="Напряжение на ядре ЦП №" + cpu_num,
                       _type="float",
                       identifier="CPU{} VCore".format(cpu_num),
                       protocol="ipmi",
                       units="В",
                       reg_expression=ipmi_regexp.format("CPU{} VCore".format(cpu_num)),
                       value_boundaries=(0.6, None, None, 1.35)))

    param_init.append(dict(name="CPU{}_Memory".format(cpu_num),
                       full_name="Напряжение памяти ЦП №" + cpu_num,
                       desc="Напряжение памяти ЦП №" + cpu_num,
                       _type="float",
                       identifier="CPU{} Memory".format(cpu_num),
                       protocol="ipmi",
                       units="В",
                       reg_expression=ipmi_regexp.format("CPU{} Memory".format(cpu_num)),
                       value_boundaries=(1.17, None, None, 1.65)))

param_init.append(dict(name="3_3V",
                       full_name="3.3 В",
                       desc="Напряжение линии 3.3 В",
                       _type="float",
                       identifier="3.3V",
                       protocol="ipmi",
                       units="В",
                       reg_expression=ipmi_regexp.format("3.3V"),
                       value_boundaries=(3.06, None, None, 3.528)))

param_init.append(dict(name="5V",
                       full_name="5 В",
                       desc="Напряжение линии 5.5 В",
                       _type="float",
                       identifier="5V",
                       protocol="ipmi",
                       units="В",
                       reg_expression=ipmi_regexp.format("5V"),
                       value_boundaries=(4.698, None, None, 5.4)))

param_init.append(dict(name="12V",
                       full_name="12 В",
                       desc="Напряжение линии 12 В",
                       _type="float",
                       identifier="12V",
                       protocol="ipmi",
                       units="В",
                       reg_expression=ipmi_regexp.format("12V"),
                       value_boundaries=(11.115, None, None, 12.805)))

param_init.append(dict(name="VBAT",
                       full_name="Батарея",
                       desc="Напряжение батареи",
                       _type="float",
                       identifier="VBAT",
                       protocol="ipmi",
                       units="В",
                       reg_expression=ipmi_regexp.format("VBAT"),
                       value_boundaries=(2.492, None, None, 3.388)))

# FANs
# ---------------------------------------------------------------------------
for fan in range(1, 7):
    fan = str(fan)
    param_init.append(dict(name="SYS_FAN_{}".format(fan),
                       full_name="Системный вентилятор №{}".format(fan),
                       desc="Скорость вращения системного вентилятора №{}".format(fan),
                       _type="float",
                       identifier="SYS_FAN_{}".format(fan),
                       protocol="ipmi",
                       units="об/мин",
                       reg_expression=ipmi_regexp.format("SYS_FAN_{}".format(fan)),
                       value_boundaries=(720, 800, max_warn_fan_speed, max_err_fan_speed)))

for psu in range(1, 4):
    psu = str(psu)
    param_init.append(dict(name="PSU{}_Power".format(psu),
                       full_name="БП №{}".format(psu),
                       desc="Мощность БП №{}".format(psu),
                       _type="float",
                       identifier="PSU{} Power".format(psu),
                       protocol="ipmi",
                       units="Вт",
                       reg_expression=ipmi_regexp.format("PSU{} Power".format(psu)),
                       value_boundaries=(None, None, 1000, 1200)))


# GPU parameters
# ---------------------------------------------------------------------------
for gpu in range(0, 8):
    tmp_oid = str(50 + gpu)
    mem_oid = str(60 + gpu)
    end_oid = str(48 + gpu)
    gpu = str(gpu)
    param_init.append(dict(name="GPU{}_Temp".format(gpu),
                           full_name="Температура ГП №" + gpu,
                           desc="Температура ГП №" + gpu,
                           _type="int",
                           identifier=".1.3.6.1.4.1.2021.{}.4.1.2.6.116.101.109.112.95.{}.1".format(tmp_oid, end_oid),
                           protocol="snmp",
                           units="°C",
                           value_boundaries=(0, 5, 97, 100)))

    param_init.append(dict(name="GPU{}_Memory".format(gpu),
                           full_name="Свободная память ГП №" + gpu,
                           desc="Свободная память ГП №" + gpu,
                           _type="float",
                           identifier=".1.3.6.1.4.1.2021.{}.4.1.2.6.116.101.109.112.95.{}.1".format(mem_oid, end_oid),
                           protocol="snmp",
                           units="%",
                           value_boundaries=(None, None, 100, None)))
# PDU
# ---------------------------------------------------------------------------
param_init.append(dict(name="LoadStatus",
                       full_name="Статус нагрузки",
                       desc="Статус нагрузки распределителя питания",
                       _type="int",
                       identifier=".1.3.6.1.4.1.318.1.1.26.4.3.1.4.1",
                       protocol="snmp",
                       units="1 - низкая нагрузка, 2 - нормальная нагрузка, 3 - на грани перегрузки, 4 - перегрузка",
                       value_boundaries=(None, 1, 3, 4)))

param_init.append(dict(name="DeviceLoad",
                       full_name="Нагрузка распределителя питания",
                       desc="Нагрузка распределителя питания",
                       _type="int",
                       identifier=".1.3.6.1.4.1.318.1.1.26.4.3.1.5.1",
                       protocol="snmp",
                       units="0.01 кВт",
                       value_boundaries=(None, 0.0, 880, 1100)))

param_init.append(dict(name="PowerConsumpted",
                       full_name="Потреблённая энергия",
                       desc="Потреблённая энергия",
                       _type="int",
                       identifier=".1.3.6.1.4.1.318.1.1.26.4.3.1.9.1",
                       protocol="snmp",
                       units="0.1 кВт*ч"))

param_init.append(dict(name="PduPowerUsed",
                       full_name="Потребляемая энергия PDU",
                       desc="Потребляемая энергия PDU",
                       _type="int",
                       identifier="",
                       protocol="calc",
                       units="кВт",
                       is_calculated=True,
                       names_of_params_to_calculate=['PowerConsumpted'],
                       list_of_function_to_calculate=[],
                       calculation_const=value_multipliers['amper_to_watt']))

# PDU phases
# ---------------------------------------------------------------------------
for phase_num in range(1, 4):
    phase_num = str(phase_num)
    param_init.append(dict(name="Phase{}LoadStatus".format(phase_num),
                       full_name="Статус нагрузки фазы №{}".format(phase_num),
                       desc="Статус нагрузки фазы №{}".format(phase_num),
                       _type="int",
                       identifier=".1.3.6.1.4.1.318.1.1.26.6.3.1.4.{}".format(phase_num),
                       protocol="snmp",
                       units="1 - низкая нагрузка, 2 - нормальная нагрузка, 3 - на грани перегрузки, 4 - перегрузка",
                       value_boundaries=(None, 1, 3, 4)))

    param_init.append(dict(name="Phase{}Current".format(phase_num),
                       full_name="Ток фазы №{}".format(phase_num),
                       desc="Ток фазы №{}".format(phase_num),
                       _type="int",
                       identifier=".1.3.6.1.4.1.318.1.1.26.6.3.1.5.{}".format(phase_num),
                       protocol="snmp",
                       units="A",
                       value_boundaries=(None, 0, 13, 16),
                       value_mult=value_multipliers['01A_to_A']))

    param_init.append(dict(name="Phase{}Voltage".format(phase_num),
                       full_name="Напряжение фазы №{}".format(phase_num),
                       desc="Напряжение фазы №{}".format(phase_num),
                       _type="int",
                       identifier=".1.3.6.1.4.1.318.1.1.26.6.3.1.6.{}".format(phase_num),
                       protocol="snmp",
                       units="В",
                       value_boundaries=(0, 200, 250, 260)))

    param_init.append(dict(name="Phase{}Power".format(phase_num),
                       full_name="Мощность фазы №{}".format(phase_num),
                       desc="Мощность фазы №{}".format(phase_num),
                       _type="int",
                       identifier=".1.3.6.1.4.1.318.1.1.26.6.3.1.7.{}".format(phase_num),
                       protocol="snmp",
                       units="0.1 кВт"))


param_init.append(dict(name="LoadStatus_7921",
                       full_name="Статус нагрузки",
                       desc="Статус нагрузки распределителя питания",
                       _type="int",
                       identifier=".1.3.6.1.4.1.318.1.1.12.2.3.1.1.3.1",
                       protocol="snmp",
                       units="2 - низкая нагрузка, 1 - нормальная нагрузка, 3 - на грани перегрузки, 4 - перегрузка",
                       value_boundaries=(None, None, 3, 4)))

param_init.append(dict(name="DeviceLoad_7921",
                       full_name="Нагрузка распределителя питания",
                       desc="Нагрузка распределителя питания",
                       _type="int",
                       identifier=".1.3.6.1.4.1.318.1.1.12.2.3.1.1.2.1",
                       protocol="snmp",
                       units="A",
                       value_boundaries=(None, None, 120, 160),
                       value_mult=value_multipliers['01A_to_A']))

# UPS:
param_init.append(dict(name="batCharge",
                       full_name="Остаточный заряд батареи",
                       desc="Остаточный заряд батареи",
                       _type="int",
                       identifier=".1.3.6.1.4.1.534.1.2.4",
                       protocol="snmp",
                       units="%",
                       value_boundaries=(0, 5, None, None)))

param_init.append(dict(name="batRunTime",
                       full_name="Время работы",
                       desc="Время работы до исчерпания заряда батареи",
                       _type="int",
                       identifier=".1.3.6.1.4.1.534.1.2.1",
                       protocol="snmp",
                       units="с",
                       value_boundaries=(60, 180, None, None)))

# Raids
# ----------------------------------------------------------------------------
raid_oid = [
    '',
    '.1.3.6.1.3.94.1.8.1.6.32.128.0.192.255.21.98.97.0.0.0.0.0.0.0.0.',
    '.1.3.6.1.3.94.1.8.1.6.32.128.0.192.255.21.97.107.0.0.0.0.0.0.0.0.']
    # Its work for buer
    #'.1.3.6.1.3.94.1.8.1.6.32.128.0.192.255.29.179.42.0.0.0.0.0.0.0.0.

for raid in [1, 2]:
    index = 1
    for temp in range(1, 4):
        for ctrl in ['A', 'B']:
            param_init.append(dict(name="OnBoardTemp{}_Ctrl{}{}".format(temp, ctrl, raid),
                           full_name="Температурный сенсор {}{} raid{}".format(temp, ctrl, raid),
                           desc="Показания температурного сенсора {}{} raid{}".format(temp, ctrl, raid),
                           _type="float",
                           identifier="{}{}".format(raid_oid[raid], index),
                           protocol="snmp",
                           units="°C",
                           reg_expression=raid_temp_regexp,
                           value_boundaries=(min_err_cpu_temp, min_warn_cpu_temp,
                                                                        max_warn_cpu_temp, max_err_cpu_temp)))
            index += 1

    for ctrl in ['A', 'B']:
        param_init.append(dict(name="DiskCtrlTemp_Ctrl{}{}".format(ctrl, raid),
                           full_name="Дисковый контроллер {} raid{}".format(ctrl, raid),
                           desc="Температура дискового контроллера {} raid{}".format(ctrl, raid),
                           _type="float",
                           identifier="{}{}".format(raid_oid[raid], index),
                           protocol="snmp",
                           units="°C",
                           reg_expression=raid_temp_regexp,
                           value_boundaries=(min_err_cpu_temp, min_warn_cpu_temp,
                                                                        max_warn_cpu_temp, max_err_cpu_temp)))
        index += 1

    for ctrl in ['A', 'B']:
        param_init.append(dict(name="MemCtrlTemp_Ctrl{}{}".format(ctrl, raid),
                           full_name="Контроллер памяти {} raid{}".format(ctrl, raid),
                           desc="Температура контроллера памяти {} raid{}".format(ctrl, raid),
                           _type="float",
                           identifier="{}{}".format(raid_oid[raid], index),
                           protocol="snmp",
                           units="°C",
                           reg_expression=raid_temp_regexp,
                           value_boundaries=(min_err_cpu_temp, min_warn_cpu_temp,
                                                                        max_warn_cpu_temp, max_err_cpu_temp)))
        index += 1


# Temperature sensors
# ----------------------------------------------------------------------------
for sensor in range(1, 5):
    param_init.append(dict(name="sensor_t0{}".format(sensor),
                       full_name = "Датчик температуры №{}".format(sensor),
                       desc="Показания датчика температуры №{}".format(sensor),
                       _type="float",
                       identifier="1.3.6.1.4.1.318.1.1.10.4.2.3.1.5.0.{}".format(2 + sensor),
                       protocol="snmp",
                       units="°C",
                       value_boundaries=(min_err_outer_temp, min_warn_outer_temp,
                                         max_warn_outer_temp, max_err_outer_temp)))
    param_init.append(dict(name="sensor_h0{}".format(sensor),
                       full_name = "Датчик влажности №{}".format(sensor),
                       desc="Показания датчика влажности №{}".format(sensor),
                       _type="float",
                       identifier=".1.3.6.1.4.1.318.1.1.10.4.2.3.1.6.0.{}".format(2 + sensor),
                       protocol="snmp",
                       units="%",
                       value_boundaries=(min_err_outer_humid, min_warn_outer_humid,
                                         max_warn_outer_humid, max_err_outer_humid)))

door_name = ['', 'передней', 'задней']
for door in range(1, 3):
    param_init.append(dict(name="sensor_l0{}".format(door),
                       full_name="Датчик состояния {} двери".format(door_name[door]),
                       desc="Датчик состояния {} двери".format(door_name[door]),
                       _type="int",
                       identifier="1.3.6.1.4.1.318.1.1.10.4.3.2.1.5.0.{}".format(door),
                       protocol="snmp",
                       units="2 - открыто. 1 - закрыто.",
                       vrange=[0, 3]))


# Network
# ----------------------------------------------------------------------------
for index in range(1, MaxSwitchPorts + 1):
    param_init.append(dict(name="sw_oper_status_{}".format(index),
                      full_name="Статус интерфейса №{}".format(index),
                      desc="Статус интерфейса eth{}".format(index-1),
                      _type="int",
                      identifier="1.3.6.1.2.1.2.2.1.8." + str(index),
                      protocol="snmp",
                      units="1-работает/2-нет",
                      visible=False))

    param_init.append(dict(name="sw_in_octets_{}".format(index),
                      full_name="Число входящих октетов в eth{}".format(index-1),
                      desc="Число входящих октетов в eth{}".format(index-1),
                      _type="int",
                      identifier=".1.3.6.1.2.1.2.2.1.10." + str(index),
                      protocol="snmp",
                      units="да/нет",
                      visible=False))

    param_init.append(dict(name="sw_in_discards_{}".format(index),
                      full_name="Число отброшенных вход eth{}".format(index-1),
                      desc="Полное число отброшенных пакетов на входе интерфейса eth{}".format(index),
                      _type="str",
                      identifier=".1.3.6.1.2.1.2.2.1.13." + str(index),
                      protocol="snmp",
                      units="отброшенные пакеты",
                      visible=False))

    param_init.append(dict(name="sw_in_errors_{}".format(index),
                      full_name="Ошибки вход eth{}".format(index),
                      desc="Полное число ошибок на входе интерфейса eth{}".format(index),
                      _type="str",
                      identifier=".1.3.6.1.2.1.2.2.1.14." + str(index),
                      protocol="snmp",
                      units="ошибки",
                      visible=False))

    param_init.append(dict(name="sw_out_octets_{}".format(index),
                      full_name="Октеты eth{}".format(index),
                      desc="Полное число октетов, посланных через интерфейс eth{}".format(index),
                      _type="str",
                      identifier=".1.3.6.1.2.1.2.2.1.16." + str(index),
                      protocol="snmp",
                      units="октеты",
                      visible=False))

    param_init.append(dict(name="sw_out_discards_{}".format(index),
                      full_name="Число отброшенных выход eth{}".format(index),
                      desc="Полное число отброшенных пакетов на выходе интерфейса eth{}".format(index),
                      _type="str",
                      identifier=".1.3.6.1.2.1.2.2.1.19." + str(index),
                      protocol="snmp",
                      units="отброшенные пакеты",
                      visible=False))

    param_init.append(dict(name="sw_out_errors_{}".format(index),
                      full_name="Ошибки выход eth{}".format(index),
                      desc="Полное число ошибок на выходе интерфейса eth{}".format(index),
                      _type="str",
                      identifier=".1.3.6.1.2.1.2.2.1.20." + str(index),
                      protocol="snmp",
                      units="ошибки",
                      visible=False))

    param_init.append(dict(name="sw_queue_len_{}".format(index),
                      full_name="Очередь eth{}".format(index),
                      desc="Число пакетов в очереди на интерфейсе eth{}".format(index),
                      _type="str",
                      identifier=".1.3.6.1.2.1.2.2.1.21." + str(index),
                      protocol="snmp",
                      units="пакеты",
                      visible=False))

# CPU's
# ----------------------------------------------------------------------------
for index in range(1, MaxProcNumber + 1):
    param_init.append(dict(name="usage_cpu_core_{}".format(index),
                      full_name="Использование ядра №{}".format(index),
                      desc="Использование ядра №{} ЦП".format(index),
                      _type="int",
                      # TODO: not always begins with 767
                      identifier=".1.3.6.1.2.1.25.3.3.1.2." + str(767 + index), # begins with 768
                      protocol="snmp",
                      visible=False,
                      units="%"))
# Others
# ----------------------------------------------------------------------------
param_init.append(dict(name="online",
                       full_name = "Доступность",
                       desc="Доступность устройства",
                       _type="int",
                       identifier="",
                       protocol="icmp",
                       units="1-доступно, 0-недоступно",
                       value_boundaries=(None, 0, None, None),
                       vrange=[0, 1],
                       visible=cfg.IS_ONLINE_VISIBLE))

param_init.append(dict(name="online_bmc",
                       full_name = "Доступность интерфейса BMC",
                       desc="Доступность интерфейса BMC",
                       _type="int",
                       identifier="",
                       protocol="icmp",
                       units="1-доступно, 0-недоступно",
                       value_boundaries=(None, 0, None, None),
                       vrange=[0, 1]))

param_init.append(dict(name="maxProcesses",
                       full_name="maxProcesses",
                       desc="Maximum number of processes",
                       _type="int",
                       identifier=".1.3.6.1.2.1.25.1.7.0",
                       protocol="snmp",
                       units="Num"))

param_init.append(dict(name="ifNumber",
                       full_name="ifNumber",
                       desc="Number of interfaces",
                       _type="int",
                       identifier=".1.3.6.1.2.1.2.1.0",
                       protocol="snmp",
                       units="Num",
                       collect_interval=60*60*6))

