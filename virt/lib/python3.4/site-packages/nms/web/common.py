#!/usr/bin/env python3

# This is proprietary software.
# Part of cluster monitoring project.
# PEP8 codestyle used, python version 3.
#
# authors: dmitry khodakov <dmitryhd@gmail.com>

""" Support functions to work with data for web. """

from flask import request, g, jsonify

import nms.config as cfg
import nms.utility as utility
from nms.core.alert_handler import AlertHandler
import nms.core.power_control as pc
import nms.core.bx_interface as bx
import tpo.environment_check as env


def convert_time_to_milliseconds(values):
    """ Javascript timestamps are in millisecons, we must convert time
        in values before passing it to js plotter.
    """
    for data_entry in values:
        data_entry[0] *= 1000


def adjust_values(values, param):
    """ Multiply values by param.value_mult if it prestents. """
    if not param.value_mult is None:
        mult = float(param.value_mult)
        for data_entry in values:
            if not data_entry[1] is None:  # data_entry is [time, value]
                data_entry[1] *= mult


def calculate_last_date_in_values(values):
    """ Return str with last date in values or 'Никогда' """
    try:
        last_date_timestamp = max([date for date, value in values])
    except ValueError:
        return "Никогда"
    return utility.time_to_str(last_date_timestamp)


# TODO: This function may become obsolete soon
def alerts_format_time(alerts):
    """ Convert alert time for proper web. """
    for alert in alerts:
        alert.start_time_str = utility.time_to_str(alert.start_time)
        alert.start_time_int = alert.start_time
        alert.start_time_int -= cfg.PLOT_ALERT_ADDITIONAL_TIME_DOWN
        try:
            alert.end_time_str = alert.end_time.strftime(cfg.TIME_FORMAT)
            alert.end_time_int = utility.time_to_int(alert.end_time)
            alert.end_time_int += cfg.PLOT_ALERT_ADDITIONAL_TIME_UP
        except (ValueError, AttributeError):
            pass
    pass


# TODO: This function may become obsolete soon
def format_ip_address(general_device):
    """ Get host ip address in valid format. """
    host_addr = utility.parse_hosts()
    for dev in general_device.devices:
        try:
            dev.ip_address_int = dev.ip_addr + ': '
            dev.ip_address_int += host_addr[dev.ip_addr]
        except (KeyError, TypeError):
            dev.ip_address_int = dev.ip_addr


def set_alert_state_to_parameters(parameters, alerts):
    """ If parameter name in alerts, then set do_have_alerts to True. """
    alert_parameters = {alert.param_name for alert in alerts}
    for parameter in parameters:
        parameter.do_have_alerts = parameter.name in alert_parameters


def set_alert_to_general_devices(last_alerts):
    """ Set field do_have_alerts to true, if device have alerts. """
    alert_dev = {alert.device_name for alert in last_alerts}
    for gdev in g.context.general_devices.values():
        for dev in gdev.devices:
            gdev.do_have_alerts = True if dev.name in alert_dev else False


# TODO: fix
def admin_execute_action(actions):
    """ Execute order from web admin page. """
    if actions.get('restart'):
        com = "bash /home/user/NMS/scripts/restart_collector.sh"
        pc.execute_as(user, com)
    if actions.get('clear_log'):
        # TODO: add here clear journal
        pass


def get_all_data(dev_name, param_name):
    values = get_values(dev_name, param_name)
    adjust_values(values, g.context.parameters[param_name])
    convert_time_to_milliseconds(values)
    return jsonify(result=values)


def get_values(dev_name, param_name):
    """ Get values from database with format specified in requests. """
    if request.args.get('from'):
        values = g.collected_db.get_times_values(
            dev_name, param_name, int(request.args.get('from')),
            int(request.args.get('to')))
    else:
        try:
            values = g.collected_db.get_times_values(dev_name, param_name)
        except KeyError:
            values = g.collected_db.get_times_values(dev_name + 'BMC',
                                                     param_name)
    values.sort(key=lambda tup: tup[0])
    return values


def get_last_data(dev_name, param_name):
    try:
        values = g.collected_db.get_last_data(dev_name, param_name, 1)
    except KeyError:
        values = g.collected_db.get_last_data(dev_name + 'BMC', param_name, 1)
    adjust_values(values, g.context.parameters[param_name])
    convert_time_to_milliseconds(values)
    return jsonify(result=values)


def get_device_last_values(gd_name):
    """ Return json with last collected values of device, or None's. """
    values = {}
    gdev = g.context.general_devices[gd_name]
    for param_name in gdev.params_dict:
        dev_name = utility.to_device(gdev, param_name)
        try:
            value = g.collected_db.get_last_data(dev_name, param_name)[0][1]
        except:
            value = None
        value = g.context.parameters[param_name].make_value_readable(value)
        values[param_name] = value
    return jsonify(values)


def get_bx_queue():
    """ Return json with bx_queue. """
    queue = bx.read_bx_queue(cfg.BX_FILE)
    return jsonify(queue)

def get_bx_info():
    """ Return json with bx_info. """
    info = bx.read_bx_info(cfg.BX_INFO_FILE)
    return jsonify(info)


def get_bx_schedule():
    """ Return json with bx_schedule. """
    info = bx.read_bx_schedule(cfg.BX_SCHEDULE_FILE)
    return jsonify(info)

def get_bx_so_list():
    """ Return json with bx_so_list. """
    info = bx.read_bx_so_list(cfg.BX_SO_LIST_FILE)
    return jsonify(info)

def get_bx_status():
    """ Return json with bx_status. """
    info = bx.read_bx_status(cfg.BX_STATUS_FILE)
    return jsonify(info)

def get_services_states():
    """ Return json with service_states. """
    info = env.get_services_states()
    return jsonify(info)

def get_alerts(device):
    """ Return json with alerts for given device or all devices if all given.
    """
    if device == 'all':
        alerts = [alert.to_dict() for alert in g.alert_handler.get_alerts()]
        return jsonify(alerts=alerts)

def get_old_alerts(device):
    """ Return json with alerts for given device or all devices if all given.
    """
    print(g.alert_handler.get_old_alerts())
    if device == 'all':
        alerts = [alrt.to_dict() for alrt in g.alert_handler.get_old_alerts()]
        return jsonify(alerts=alerts)

def get_server_time():
    """ Return json with {'time': server_time_in_str_format}. """
    server_time = {'time': g.current_time}
    return jsonify(server_time)


def power_control_action_burka(device, action):
    if action == 'off':
        utility.log_color('power off device', 'yellow', 'warn ')
        pc.local_power_off()
    if action == 'reboot':
        print('reboot device')
        pc.local_reboot()


def power_control_action_buer(general_dev_name, action):
    """ Perform power control action in buer system.
        Allowed actions: 'power_on', 'soft_shutdown', 'hard_shutdown',
                         'disable_outlets', 'reboot'
    """
    if general_dev_name == 'all':
        gpm = pc.GlobalPowerManager(g.context, g.system_db)
        perform_action = {'power_on': gpm.power_on,
                          'reboot': gpm.reboot,
                          'soft_shutdown': gpm.soft_shutdown}
        perform_action[action]()
    else:
        spm = pc.ServerPowerManager(g.context.general_devices[general_dev_name])
        spm.connect_db(g.system_db)
        perform_action = {'power_on': spm.power_on,
                          'soft_shutdown': spm.soft_shutdown,
                          'hard_shutdown': spm.hard_shutdown,
                          'disable_outlets': spm.disable_outlets,
                          'reboot': spm.reboot }
        perform_action[action]()


def power_control_action(device, action):
    """ Perform action on device. """
    if cfg.SYSTEM_NAME == 'burka':
        power_control_action_burka(device, action)
    elif cfg.SYSTEM_NAME == 'buer':
        power_control_action_buer(device, action)
    # TODO
    return "200"


def get_bmc_dev(context):
    """ ss """
    from operator import attrgetter 
    # TODO: sdfvsdf
    bmc_devices = [dev for dev in context.devices.values()
                   if 'BMC' in dev.name] 
    # TODO: hack add parameter
    for dev in bmc_devices:
        dev.gdev_name = utility.to_general_device(dev.name, g.context)
    bmc_devices.sort(key=attrgetter('name'))
    return bmc_devices


def get_power_status(gdev_name):
    """ Return json in following format:
        {'gdev': {'ping': False, 'ipmi_state': True, 'all_outlets_on': True}}
    """
    power_status = {} 
    spm = pc.ServerPowerManager(g.context.general_devices[gdev_name])
    power_status[gdev_name] = {
        'ping': spm.ping(),
        'ipmi_status': spm.ipmi_status(),
        'all_outlets_on': spm.all_outlets_on(),
        'admin_status': g.system_db.get_admin_status(gdev_name)}
    return jsonify(power_status)


def get_power_contolled_device_names():
    """ Return json in following format:
        {'names': ['dev1', 'dev2', ...]}
    """
    names = []
    bmc_devices = [dev for dev in g.context.devices.values()
                   if 'BMC' in dev.name] 
    # TODO: hack add parameter
    for dev in bmc_devices:
        names.append(utility.to_general_device(dev.name))
    json_out = {'names': names}
    return jsonify(json_out)


def max_of_values(values, names):
    values_to_compare = [values[name] for name in names if values[name] is not None]
    if values_to_compare:
        return max(values_to_compare)
    else:
        return '-'


def get_nodes_short_stat():
    """ Return json in following format:
        {'node1': {'ping': True, 'MAX_GPU_T': 50, 'MAX_CPU_T': 30, 'MEM': 30 #free percent,
                   'CPU': 11, 'GPU_1': 0, ... 'GPU_8': 100},
         'node2': ... }
    """
    nodes_stat = {}
    cpu_temp_names = ['CPU_TEMP_00' + str(i) for i in range(1, 6)]
    gpu_temp_names = ['GPU_TEMP_00' + str(i) for i in range(1, 9)]
    node_names = ['node1', 'node2', 'node3', 'node4', 'node5', 'node6']
    for gdev_name in node_names:
        values = {}
        gdev = g.context.general_devices[gdev_name]
        for param_name in gdev.params_dict:
            dev_name = utility.to_device(gdev, param_name)
            try:
                value = g.collected_db.get_last_data(dev_name, param_name)[0][1]
            except:
                value = None
            value = g.context.parameters[param_name].make_value_readable(value)
            values[param_name] = value
        node_stat = {'ping': values['online'],
                     'MAX_GPU_T': max_of_values(values, gpu_temp_names),
                     'MAX_CPU_T': max_of_values(values, cpu_temp_names),
                     'MEM': values['memFreePercent'],
                     'CPU': values['cpuUser'],
                     'GPU_1': values['GPU_LOAD_001'],
                     'GPU_2': values['GPU_LOAD_002'],
                     'GPU_3': values['GPU_LOAD_003'],
                     'GPU_4': values['GPU_LOAD_004'],
                     'GPU_5': values['GPU_LOAD_005'],
                     'GPU_6': values['GPU_LOAD_006'],
                     'GPU_7': values['GPU_LOAD_007'],
                     'GPU_8': values['GPU_LOAD_008'],
                    }
        for param in node_stat:
            if node_stat[param] is None:
                node_stat[param] = '-'
        nodes_stat[gdev_name] = node_stat
    return jsonify(nodes_stat)
    
