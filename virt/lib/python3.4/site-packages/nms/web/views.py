#!/usr/bin/env python3

# This is proprietary software.
# Part of cluster monitoring project.
# PEP8 codestyle used, python version 3.
#
# authors: dmitry khodakov <dmitryhd@gmail.com>

""" Web representation of NMS. """

from flask import request, render_template, g, url_for, redirect
from operator import attrgetter

import nms
import nms.config as cfg
import nms.core.devices as devices
import nms.core.nodes_test as nodes_test
import nms.web.common as common
import nms.core.power_control as power
import nms.utility as utility
from nms.web.auth import login_required
from nms.web.pagination import Pagination


def index():
    """ View for main page. """
    if cfg.SYSTEM_NAME == 'burka':
        return redirect(url_for('device', device_name='server'))
    g.system_db.load_devices_online_status(g.context.general_devices)
    g.context.set_status_of_device_containers()
    last_alerts = g.alert_handler.get_alerts()
    common.alerts_format_time(last_alerts)
    common.set_alert_to_general_devices(last_alerts)
    sorted_devices = sorted(g.context.device_containers.values(),
                            key=lambda dev: dev.name)
    # aggregate nodes as list of devices
    nodes = [dev for dev in g.context.general_devices.values() if 'node' in dev.name]
    nodes.sort(key=attrgetter('name'))
    return render_template('index.html', devices=sorted_devices,
                           current_alerts=last_alerts,
                           view='index', types=cfg.ALERT_DESCRIPTION, nodes=nodes)


@login_required
def journal():
    """ View of past alerts. """
    import operator
    old_alerts = g.alert_handler.get_old_alerts()
    # TODO: wont be necessary
    old_alerts.sort(key=operator.attrgetter('start_time'), reverse=True)
    # TODO: wont be necessary
    common.alerts_format_time(old_alerts)
    alert_paginator = Pagination(old_alerts)
    if request.args.get('page'):
        alert_paginator.cur_page = int(request.args.get('page'))
    else:
        alert_paginator.cur_page = 1
    #TODO: delete types
    return render_template('journal.html', alert_paginator=alert_paginator,
                           view='journal', types=cfg.ALERT_DESCRIPTION)


@login_required
def power_control():
    """ Power on and off devices. """
    return render_template('power_control_.html', view='control')


@login_required
def power_control_buer():
    """ Power on and off devices. """
    bmc_devices = [dev for dev in g.context.devices.values()
                   if 'BMC' in dev.name] 
    # TODO: hack add parameter
    for dev in bmc_devices:
        dev.gdev_name = utility.to_general_device(dev.name)
    bmc_devices.sort(key=attrgetter('name'))
    return render_template('power_control_buer.html', bmc_devices=bmc_devices,
                           view='control')


@login_required
def power_control_burka(action=None):
    """ Power on and off devices. """
    return render_template('power_control_burka.html', view='control')


@login_required
def test():
    """ View for checking computational nodes availability, accelerator
        presence and so on.
    """
    test_res = None
    share_ok = dhcp_state = False
    if request.args.get('do_check'):
        test_res = nodes_test.nodes_check()
        test_res = [(dev, res) for dev, res in test_res.items()]
        test_res.sort(key=lambda pair: pair[0])
        share_ok = nodes_test.check_mount_point()
        dhcp_state = nodes_test.check_dhcp()
    # TODO: rewrite and pass dictionary. MB should use JSON here.

    # aggregate nodes as list of devices
    nodes = [dev for dev in g.context.general_devices.values() if 'node' in dev.name]
    nodes.sort(key=attrgetter('name'))
    return render_template('test.html', test_res=test_res, share_ok=share_ok,
                           dhcp_state=dhcp_state, nodes=nodes, view='test')


@login_required
def admin():
    """ View of custom admin page. """
    common.admin_execute_action(request.args)
    db_begin_date, db_end_date = None, None #g.collected_db.get_time_interval( 'MonitoringServer')
    # TODO: pass db parameters as dict
    return render_template('admin.html', view='admin',
                           db_name=g.collected_db.name,
                           db_begin_date=db_begin_date,
                           db_end_date=db_end_date,
                           db_size=round(g.collected_db.get_size(), 1),
                           nms_version=nms.__version__)


@login_required
def device(device_name):
    """ View of general device """
    # TODO: more descriptive conversion to device.
    general_device_name = device_name.replace("BMC", "")
    gdev = g.context.general_devices[general_device_name]
    common.format_ip_address(gdev)
    # TODO: one function
    dev_alerts = []
    for dev in g.context.general_devices[general_device_name].devices:
        dev_alerts.extend(g.alert_handler.get_alerts_by_dev_name(dev.name))
    common.alerts_format_time(dev_alerts)
    common.set_alert_state_to_parameters(gdev.visible_parameters, dev_alerts)
    return render_template('device.html', device=gdev,
                           current_alerts=dev_alerts,
                           types=cfg.ALERT_DESCRIPTION)


@login_required
def parameter(gd_name, param_name):
    """ View for specific parameter. """
    gd_name = utility.to_general_device(gd_name)
    gdev = g.context.general_devices[gd_name]
    common.format_ip_address(gdev)
    dev_name = utility.to_device(gdev, param_name)
    param = gdev.params_dict[param_name]
    return render_template('parameter.html', parameter=param, view='param',
                           gdevice=gdev, device=g.context.devices[dev_name])


@login_required
def parameter_group(gd_name, param_gr_name):
    """ View for specific parameter. """
    gd_name = gd_name.replace("BMC", "")
    gdev = g.context.general_devices[gd_name]
    param_group = gdev.param_groups[param_gr_name]
    return render_template('param_group.html', param_group=param_group,
                           device=gdev)

@login_required
def bx_queue():
    """ View for bx queue. """
    return render_template('bx_queue.html', view='bx')

