#!/usr/bin/env python3

# This is proprietary software.
# Part of cluster monitoring project.
# PEP8 codestyle used, python version 3.
#
# authors: dmitry khodakov <dmitryhd@gmail.com>

""" Web interface application instance holder. """

from flask import Flask, g
from datetime import datetime
import locale
locale.setlocale(locale.LC_ALL, ('RU', 'UTF8'))
import logging
import time

import nms.web.auth as auth
import nms.web.common as common
import nms.web.views as views
import nms.core.database as db
from nms.core.alert_handler import AlertHandler
import nms.config as cfg


class WebApp:
    """ Container and configurator of flask web application. """
    def __init__(self, context, db_name=cfg.DB_NAME_DEFAIULT):
        self.session_manager = db.SessionManager(db_name)
        self.context = context
        self.configure_application()
        self.define_url_routing()
        self.system_db = db.SystemDataOperator(self.session_manager)
        self.collected_db = db.CollectedDataOperator(self.session_manager)
        self.alert_handler = AlertHandler(self.session_manager)

    def configure_application(self):
        """ Configure application instance. """
        log = logging.getLogger('werkzeug')
        log.setLevel(cfg.WEB_LOG_LEVEL)
        self.app = Flask(__name__)
        self.app.config['CSRF_ENABLED'] = True
        self.app.config['SECRET_KEY'] = '111111'
        self.app.debug = cfg.WEB_DEBUG

        @self.app.before_request
        def before_request():
            """ Create db connection every time, request given """
            g.system_db = self.system_db
            g.collected_db = self.collected_db
            g.alert_handler = self.alert_handler
            # Needed for web templates.
            g.current_time = datetime.now().strftime(cfg.TIME_FORMAT)
            g.context = self.context

    def define_url_routing(self):
        """ Connect all views to corresponding urls. """
        # TODO format as list
        self.app.add_url_rule('/nms/login/', 'login', auth.login,
                              methods=('GET', 'POST'))
        self.app.add_url_rule('/nms/logout/', 'logout', auth.logout)
        self.app.add_url_rule('/nms/', 'index', views.index)
        self.app.add_url_rule('/nms/journal/', 'journal', views.journal)
        self.app.add_url_rule('/nms/power_control/', 'power_control',
                              views.power_control_buer)
        self.app.add_url_rule('/nms/test/', 'test', views.test)
        self.app.add_url_rule('/nms/_power_control_action/<device>/<action>/', 'power_control_action', common.power_control_action)
        self.app.add_url_rule('/nms/_get_power_status/<gdev_name>/', 'get_power_status', common.get_power_status)
        self.app.add_url_rule('/nms/_get_power_contolled_device_names/',
                              '_get_power_contolled_device_names',
                              common.get_power_contolled_device_names)

        self.app.add_url_rule('/nms/admin/', 'admin', views.admin)
        self.app.add_url_rule('/nms/device/<device_name>/',
                              'device', views.device)
        self.app.add_url_rule('/nms/parameter/<gd_name>/<param_name>/',
                              'parameter', views.parameter)
        self.app.add_url_rule('/nms/parameter_group/<gd_name>/<param_gr_name>/',
                              'parameter_group', views.parameter_group)
        self.app.add_url_rule('/nms/_get_param_data/<dev_name>/<param_name>/',
                              'get_param_data', common.get_all_data)
        self.app.add_url_rule('/nms/_get_last_data/<dev_name>/<param_name>/',
                              'get_last_data', common.get_last_data)
        self.app.add_url_rule('/nms/_get_device_last_values/<gd_name>/',
                              'get_device_last_values', common.get_device_last_values)

        self.app.add_url_rule('/nms/_get_nodes_short_stat/',
                              'get_nodes_short_stat', common.get_nodes_short_stat)

        self.app.add_url_rule('/nms/_get_bx_queue/', 'get_bx_queue', common.get_bx_queue)
        self.app.add_url_rule('/nms/_get_bx_info/', 'get_bx_info', common.get_bx_info)
        self.app.add_url_rule('/nms/_get_bx_schedule/', 'get_bx_schedule', common.get_bx_schedule)
        self.app.add_url_rule('/nms/_get_bx_so_list/', 'get_bx_so_list', common.get_bx_so_list)
        self.app.add_url_rule('/nms/_get_bx_status/', 'get_bx_status', common.get_bx_status)
        self.app.add_url_rule('/nms/bx_queue/', 'bx_queue', views.bx_queue)
        self.app.add_url_rule('/nms/_get_alerts/<device>/', 'get_alerts',
                              common.get_alerts)
        self.app.add_url_rule('/nms/_get_old_alerts/<device>/',
                              'get_old_alerts', common.get_old_alerts)
        self.app.add_url_rule('/nms/_get_server_time/', 'get_server_time', common.get_server_time)
        self.app.add_url_rule('/nms/_get_services_states/', 'get_services_states', common.get_services_states)

    def run_web_server(self):
        """ Configure web server with ip and start it. """
        self.app.run(host=cfg.WEB_IP, threaded=cfg.WEB_THREADS)

