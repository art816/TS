#!/usr/bin/env python3

# This is proprietary software.
# Part of cluster monitoring project.
# PEP8 codestyle used, python version 3.
#
# authors: dmitry khodakov <dmitryhd@gmail.com>

# pylint: disable=too-few-public-methods

""" Web authentification interface. """

from flask import request, render_template, redirect, session
from flask_wtf import Form
from wtforms import StringField, PasswordField
from wtforms.validators import DataRequired
from functools import wraps


class LoginForm(Form):
    """ Basic login form. """
    username = StringField('username', validators=[DataRequired()])
    password = PasswordField('password', validators=[DataRequired()])

    def validate(self):
        """ Very basic user authentification. """
        if self.username.data == 'root' and self.password.data == '111111':
            return True
        else:
            return False


def login():
    """ Login view. """
    if 'is_logged_in' in session and session['is_logged_in']:
        return redirect('/nms')
    form = LoginForm()
    if form.validate_on_submit():
        session['username'] = form.username.data
        session['is_logged_in'] = True
        if 'next_url' in session:
            next_url = session['next_url']
            del session['next_url']
            return redirect(next_url)
        return redirect('/nms')
    else:
        # TODO: use flash message.
        print('invalid username or password, {} {}'.format(
            form.username, form.password))
    return render_template('login.html', form=form)


def logout():
    """ Logout view. """
    session['username'] = ''
    session['is_logged_in'] = False
    return redirect('/nms/')


def login_required(view):
    """ Decorator for protected views. """
    @wraps(view)
    def decorated_function(*args, **kwargs):
        """ Need for decoration. """
        if 'is_logged_in' in session and session['is_logged_in']:
            return view(*args, **kwargs)
        else:
            session['next_url'] = request.path
            return redirect('/nms/login')
    return decorated_function
