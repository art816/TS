/**
 * Continously get bx state by json
 */

var nodeUpdateInerval = 3 * 1000;  // ms

setLoad = function(id_, value) { 
    if (value < 50) {
        cls = 'failed-service';
    }
    else if (value >= 50) {
        cls = 'ok-service';
    }
    else {
        cls = '';
    }
    $(id_).text(value);
    $(id_).attr("class", cls);
    if (value >= 50 && value <= 100) {
        $(id_).css({ opacity: .5 + .5 * value/100.0 });
    }
}

getNodesState = function () {
    $.getJSON('/nms/_get_nodes_short_stat/', function(nodesStat) { 
        //Some code
        for (node in nodesStat) {
            var id_ = '#' + node + '-ping';
            $(id_).text(nodesStat[node].ping);
            if (nodesStat[node].ping == 'online') {
                $(id_).attr("class", "ok-service");
            }
            else {
                $(id_).attr("class", "failed-service");
                $(id_).text('offline');
            }
            $('#' + node + '-max-gpu-t').text(nodesStat[node].MAX_GPU_T);
            $('#' + node + '-max-cpu-t').text(nodesStat[node].MAX_CPU_T);
            $('#' + node + '-mem').text(nodesStat[node].MEM);
            $('#' + node + '-cpu').text(nodesStat[node].CPU);
            setLoad('#' + node + '-gpu1', nodesStat[node].GPU_1);
            setLoad('#' + node + '-gpu2', nodesStat[node].GPU_2);
            setLoad('#' + node + '-gpu3', nodesStat[node].GPU_3);
            setLoad('#' + node + '-gpu4', nodesStat[node].GPU_4);
            setLoad('#' + node + '-gpu5', nodesStat[node].GPU_5);
            setLoad('#' + node + '-gpu6', nodesStat[node].GPU_6);
            setLoad('#' + node + '-gpu7', nodesStat[node].GPU_7);
            setLoad('#' + node + '-gpu8', nodesStat[node].GPU_8);
        };
    });
    // Blink to indicate load
    blinkIndicator('#update-indicator');
    //blinkIndicator();
};

/**
 * Blinks with indicator
 */
blinkIndicator = function(id) {
    var indicator = $(id);
    //var originalColor = indicator.css('background-color');
    //indicator.css('background-color', '#ddd');
    setTimeout(function(){
         //indicator.css("background", originalColor);
         indicator.animate({ opacity: 0.1, }, 300);
         indicator.animate({ opacity: 1, }, 300);
    });
}

getNodesState();
$(window.setInterval(getNodesState, nodeUpdateInerval));
