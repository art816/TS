var plotUpdateInterval = 3000; // ms

var chartHeight = 240; // px

Highcharts.setOptions({
    global: {
        timezoneOffset: -6 * 60
    }
});

var optionsTemplate = {
    chart : {
        height: null,
        spacingBottom: 0,
        spacingTop: 5,
        spacingLeft: 0,
        spacingRight: 0,
    },
    xAxis: {
        gridLineWidth: 1,
        gridLineDashStyle: 'longdash',
        gridLineColor: '#888',
        tickAmount: 15,
    },
    yAxis: {
        opposite: false,
        gridLineDashStyle: 'longdash',
        gridLineColor: '#888',
        plotLines : [],
        endOnTick: false,
        startOnTick: false,
    },
    title : {},
    legend: {
        enabled: true,
        align: 'left',
        borderColor: 'black',
        borderWidth: 1,
        verticalAlign: 'center',
        y: chartHeight/5,
        x: 20,
        // NOTE this color #a8c1ce
        // more transparent: #cbdae2
        backgroundColor: '#cbdae2',
        layout: 'vertical',
        shadow: true
    },
    navigator : { enabled: true, height: 20, margin: 0, },
    scrollbar: { enabled: false },
    credits: { enabled: false },
    exporting: { enabled: false },
    rangeSelector : {
        buttons : [{
            type : 'minute',
            count : 10,
            text : '10m'
        }, {
            type : 'minute',
            count : 30,
            text : '30m'
        }, {
            type : 'hour',
            count : 1,
            text : '1h'
        }, {
            type : 'day',
            count : 1,
            text : '1D'
        }, {
            type : 'all',
            count : 1,
            text : 'All'
        }],
        allButtonsEnabled: true,
        enabled: true,
    },
    plotOptions: {
        series: {
            states: {
                hover: {
                    enabled: true,
                    lineWidth: 0.5,
                    halo: {
                        size: 1,
                    },
                }
            }
        },
        area: {
            fillOpacity: .1,
        },
        areaspline: {
            fillOpacity: .1,
        },
    },
    series : [],
};

/**
 * Plot single parameter
 */
function plot_single_parameter(plot_container_id, plot_parameters, selected_interval) {
    if (typeof(selected_interval)==='undefined') selected_interval = 0;
    function set_data_to_plot(){
        var data_url = '/nms/_get_param_data/';
        data_url += plot_parameters.device_name;
        data_url += '/' + plot_parameters.param_name;
        console.log(data_url);
        var chart = $(plot_container_id).highcharts();
        console.log(plot_parameters.ymin, plot_parameters.ymax);
        chart.yAxis[0].setExtremes(plot_parameters.ymin, plot_parameters.ymax);
        if (plot_parameters.height) {
            chart.setSize($(chart.container).width(), plot_parameters.height);
        }
        for (var i = 0; i < plot_parameters.boundaries.errors.length; i++) {
            chart.yAxis[0].addPlotLine({
                value : plot_parameters.boundaries.errors[i],
                color : 'red',
                dashStyle : 'shortdash',
                width : 2,
            });
        }
        for (var i = 0; i < plot_parameters.boundaries.warnings.length; i++) {
            chart.yAxis[0].addPlotLine({
                value : plot_parameters.boundaries.warnings[i],
                color : 'orange',
                dashStyle : 'shortdash',
                width : 2,
            });
        }
        $.getJSON(data_url, function(data) {
            var chart = $(plot_container_id).highcharts();
            chart.series[0].setData(data.result);
            chart.rangeSelector.clickButton(selected_interval, chart.rangeSelector.buttonOptions[selected_interval], true);
        });
        
    }
    function update_plot() {
        var do_update = $('#do_update_plots').is(':checked');
        if (do_update) {
            var data_url = '/nms/_get_last_data/';
            data_url += plot_parameters.device_name;
            data_url += '/' + plot_parameters.param_name;
            $.getJSON(data_url, function(data) {
                var chart = $(plot_container_id).highcharts();
                for (var i in data.result) {
                    chart.series[0].addPoint(data.result[i], false);
                }
                chart.redraw();
            });
        }
    }

    var options = $.extend({}, optionsTemplate);


    options.yAxis.max = plot_parameters.ymax;
    options.yAxis.min = plot_parameters.ymin;
    options.yAxis.ceiling = plot_parameters.ymax;
    options.yAxis.floor = plot_parameters.ymin;
    console.log('ymax:', plot_parameters.ymax);
    options.navigator.enabled = plot_parameters.navigator_enabled;
    options.chart.events = {
        load : function () {
            // set up the updating of the chart each second
            setInterval(function () {
                update_plot()
            }, plotUpdateInterval);
        }
    }
    if (options.has_title) {
        options.title = {text : plot_parameters.param_fullname + ' (' +
                                plot_parameters.param_units + ')'};
    }
    else {
        options.title = null;
    }

    options.series = [{
            name : plot_parameters.param_fullname + ' (' + plot_parameters.param_units + ')',
            type: 'areaspline',
            data : [],
            threshold : null,
            tooltip: {
                valueDecimals: 2
            },
            color: '#066',
            lineWidth: 1,
            fillColor: 'rgba(200,200,20200,0.6)',
        }],

    $(plot_container_id).highcharts('StockChart', options) 
    set_data_to_plot();
};

/**
 * Plot parameter set.
 */
function plot_parameter_set(plot_container_id, plot_parameters, param_names, param_full_names) {
    var seriesOptions = [],
        seriesCounter = 0;
    function set_data_to_plot(){
        var cnt = 0;
        var chart = $(plot_container_id).highcharts();
        if (plot_parameters.height) {
            chart.setSize($(chart.container).width(), plot_parameters.height);
        }
        for (var i = 0; i < plot_parameters.boundaries.errors.length; i++) {
            chart.yAxis[0].addPlotLine({
                value : plot_parameters.boundaries.errors[i],
                color : 'red',
                dashStyle : 'shortdash',
                width : 1,
            });
        }
        for (var i = 0; i < plot_parameters.boundaries.warnings.length; i++) {
            chart.yAxis[0].addPlotLine({
                value : plot_parameters.boundaries.warnings[i],
                color : 'orange',
                dashStyle : 'shortdash',
                width : 1,
            });
        }
        for (var key in param_names) {
            var data_url = '/nms/_get_param_data/';
            data_url += plot_parameters.device_name;
            data_url += '/' + param_names[key];
            $.getJSON(data_url, function(data) {
                var chart = $(plot_container_id).highcharts();
                chart.series[cnt].setData(data.result)
                chart.rangeSelector.clickButton(0, chart.rangeSelector.buttonOptions[0], true);
                cnt++;
            });
        }
    }
    function update_plot() {
        var do_update = $('#do_update_plots').is(':checked');
        if (do_update) {
            var cnt = 0;
            for (var key in param_names) {
                var data_url = '/nms/_get_last_data/';
                data_url += plot_parameters.device_name;
                data_url += '/' + param_names[key];
                $.getJSON(data_url, function(data) {
                    var chart = $(plot_container_id).highcharts();
                    for (var i in data.result) {
                        chart.series[cnt].addPoint(data.result[i], false);
                    }
                    chart.redraw();
                    cnt++;
                });
            };
        }
    }

    var options = $.extend({}, optionsTemplate);
    options.yAxis.max = plot_parameters.ymax;
    options.yAxis.min = plot_parameters.ymin;
    console.log('ymax:', plot_parameters.ymax);
    options.navigator.enabled = plot_parameters.navigator_enabled;
    options.series = seriesOptions;
    options.chart.events = {
        load : function () {
            // set up the updating of the chart each second
            setInterval(function () {
                update_plot()
            }, plotUpdateInterval);
        }
    }
    //options.title.text = plot_parameters.param_fullname;
    if (options.has_title) {
        options.title = {text : plot_parameters.param_fullname};
    }
    else {
        options.title = null;
    }

    createChart = function () {$(plot_container_id).highcharts('StockChart', options)};
    $.each(param_names, function (i, name) {
        seriesOptions[i] = {
            name : param_full_names[name],
            type: 'areaspline',
            data : [],
            tooltip: {
                valueDecimals: 2
            },
            lineWidth: 1,
        },
        seriesCounter += 1;
        if (seriesCounter === param_names.length) {
            createChart();

        }
    });
    set_data_to_plot();
};
