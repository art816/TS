/**
 * File: power.js
 * 
 * Main purposes of this module are
 *  - dynamic loading of power states of devices
 *  - performing power on, shutdown and other operation on devices
 */

var powerStatusUpdateInterval = 3 * 1000;  // ms

/**
 * Power control button action.
 */
buttonAction = function() {
    var do_ask_permission = $('#do_ask_permission').is(':checked');
    var dev_name_and_action = $(this).attr('id');
    if(do_ask_permission) {
        if(window.confirm("Вы уверены в своем действии?")) {
            $.get('/nms/_power_control_action/' + dev_name_and_action);
        }
        else {
            return;
        }
    }
    else {
        $.get('/nms/_power_control_action/' + dev_name_and_action);
    }
    // Print current action to bottom of page
    $.getJSON('/nms/_get_server_time/', function(serverTime) {
        var action = dev_name_and_action.split('/');
        var actionRepr = translateAction(action[1]) + ' ' + action[0]
        var actionRow = "<tr><td class='centered'>" + actionRepr;
        actionRow += "</td><td class='centered'>" + serverTime.time;
        actionRow += "</td></tr>";
        $('#power-actions tr:last').after(actionRow);
    });
};
/**
 * Set administrative status, ping, ipmi status and outlet status to all devs.
 */
setPowerStatusForAll = function() {
    blinkIndicator('#update-indicator');
    $.getJSON('/nms/_get_power_contolled_device_names/',
            function(deviceNames) {
        for (var devId = 0; devId < deviceNames.names.length; devId++) {
            setPowerStatusOfDevice(deviceNames.names[devId]);
        }
    });
}
/**
 * Get server status and set it to table.
 */
setPowerStatusOfDevice = function(gdevName) {
    setStatus = function(id_, state, text_true, text_false) {
        if (state) {
            $(id_).text(text_true);
            $(id_).attr("class", "bold-font bordered-td centered ok-service");
        }
        else {
            $(id_).text(text_false);
            $(id_).attr("class", "bold-font bordered-td centered failed-service");
        }
    };
    var jsonurl = '/nms/_get_power_status/' + gdevName + '/';
    $.getJSON(jsonurl, function(powerStatus) {
        setStatus('#' + gdevName + '-ping', powerStatus[gdevName].ping,
                  'Есть ping', 'Нет ping\'a');
        setStatus('#' + gdevName + '-ipmi-status',
                  powerStatus[gdevName].ipmi_status, 'Питание вкл.',
                  'Питание выкл.');
        setStatus('#' + gdevName + '-all-outlets-on',
                  powerStatus[gdevName].all_outlets_on, 'Розетки вкл.',
                  'Розетки выкл.');
        $('#' + gdevName + '-admin-status').text(
            powerStatus[gdevName].admin_status);
    });
}

/**
 * Translate short version of given action string to full text representation.
 */
translateAction = function(action) {
    switch (action) {
        case 'power_on': result = 'Включение'; break;
        case 'reboot': result = 'Перезагрузка'; break;
        case 'soft_shutdown': result = 'Выключение'; break;
        case 'hard_shutdown': result = 'Жесткое выключение'; break;
        case 'disable_outlets': result = 'Выключить розетки'; break;
        default: result = action;
    }
    return result;
}

/**
 * Perform all bound actions, set initial loading of data and set all timeouts.
 */
onScriptLoad = function() {
    $(function () {$('.power_control_button').click(buttonAction);});
    setPowerStatusForAll();
    $(window.setInterval(setPowerStatusForAll, powerStatusUpdateInterval));
}

onScriptLoad();
