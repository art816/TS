import nms.core.parameters as pars
from nms.core.context import Context
from nms.core.devices import Device, GeneralDevice, DeviceContainer

def customize_parameters(context):
    """ Specify some different parameters such as online. """
    context.parameters['online'].is_enum = True
    context.parameters['online'].enum = {1: 'online', 0: 'offline'}

def create_context():
    """ One computational node only. """
    context = Context()
    customize_parameters(context)

    # Configure parameters:
    cpu_temp_params = get_parameters_for_cpu_temperature_tyan()
    gpu_temp_params = get_parameters_for_gpu_temperature()
    gpu_load_params = get_parameters_for_gpu_load()
    disk_params = get_parameters_for_disk_read_write()
    context.parameters.update(cpu_temp_params)
    context.parameters.update(gpu_temp_params)
    context.parameters.update(gpu_load_params)
    context.parameters.update(disk_params)
    name = 'server'
    param_list = ['memTotalReal',
                            'memOccupiedReal', 'memCachedReal', 'memFreeReal',
                            'memFreePercent', 'online', 'cpuUser',
                            'diskOccupied', 'diskOccupiedBytes',
                            'diskBlockSize', 'diskTotalBytes', 'diskTotal',
                            ]
    long_collect_interval = 30
    context.parameters['diskOccupied'].collect_interval = long_collect_interval
    context.parameters['diskOccupiedBytes'].collect_interval = long_collect_interval
    context.parameters['diskBlockSize'].collect_interval = long_collect_interval
    context.parameters['diskTotalBytes'].collect_interval = long_collect_interval
    context.parameters['diskTotal'].collect_interval = long_collect_interval
    param_list.extend(list(cpu_temp_params))
    param_list.extend(list(gpu_temp_params))
    param_list.extend(list(gpu_load_params))
    param_list.extend(list(disk_params))

    # Configure device:
    context.devices[name] = Device(name, 'Вычислительный сервер', 'snmp',
                                   param_list)
    context.devices[name].ip_address = '10.1.20.1'
    context.devices[name].ip_addr = '10.1.20.1'

    import nms.nmsconfig.param_group_config as cfgp

    # Configure general device:
    context.general_devices[name] = GeneralDevice(
        name, 'Вычислительный сервер', '', [name], context)
    gdev = context.general_devices[name]
    gdev.main_parameters = []
    gdev.main_parameters.append('cpuUser')
    gdev.main_parameters.append('memFreePercent')
    gdev.img = 'dev_img_storage_server.png'

    # Param groups:


    gpu_load_group = pars.ParameterGroup('gpu_load_group', 'Загрузка GPU',
                                list(gpu_load_params))
    gpu_load_group.do_plot = True
    gpu_load_group.setup(gdev.params_dict)
    gpu_temp_group = pars.ParameterGroup('gpu_temp_group', 'Температура GPU',
                                list(gpu_temp_params))
    gpu_temp_group.do_plot = True
    gpu_temp_group.setup(gdev.params_dict)
    cpu_temp_group = pars.ParameterGroup('cpu_temp_group', 'Температура CPU',
                                list(cpu_temp_params))
    cpu_temp_group.do_plot = True
    cpu_temp_group.setup(gdev.params_dict)
    disk_group = pars.ParameterGroup('disk_group', 'Диски системы',
                                list(disk_params))
    disk_group.setup(gdev.params_dict)
    gdev.param_groups = {'gpu_load_group': gpu_load_group,
                         'gpu_temp_group': gpu_temp_group,
                         'cpu_temp_group': cpu_temp_group,
                         'disk_group': disk_group,
                        }

    container = DeviceContainer(gdev.name, gdev.full_name, 
                                gdev.description, context)
    container.leaf = True
    container.is_online = gdev.is_online
    container.do_have_alerts = gdev.do_have_alerts
    context.device_containers[gdev.name] = container
    return context

    
def get_parameters_for_cpu_temperature_tyan():
    # New parameters:
    # cpu temp
    temp_params = {}
    for num in range(1, 6):
        name = "CPU_TEMP_0" + '%02d' % num
        desc = "Температура CPU: датчик " + str(num)
        last_oid = 48 + num
        temp_params[name] = pars.Parameter(
            name, desc, desc, "float", 
            #"1.3.6.1.4.1.8072.1.3.2.3.1.1.14.103.101.116.95.99.112.117.95.116.101.109.112.95." + str(last_oid),
            "1.3.6.1.4.1.8072.1.3.2.4.1.2.14.103.101.116.95.99.112.117.95.116.101.109.112.95." + str(last_oid) + ".1",
            "snmp", "C", visible=False)
        temp_params[name].boundaries = pars.Boundaries(0, 5, 85, 105)
    return temp_params
            
def get_parameters_for_gpu_temperature():
    # New parameters:
    # cpu temp
    temp_params = {}
    for num in range(1, 3):
        name = "GPU_TEMP_0" + '%02d' % num
        desc = "Температура ядра GPU " + str(num)
        last_oid = 48 + num
        par = pars.Parameter(
            name, desc, desc, "float", 
            "1.3.6.1.4.1.8072.1.3.2.4.1.2.16.115.104.111.119.45.99.97.114.100.115.45.116.101.109.112." + str(last_oid) + ".1",
            "snmp", "C", visible=False)
        par.boundaries = pars.Boundaries(0, 5, 85, 105)
        temp_params[name] = par
    return temp_params

def get_parameters_for_gpu_load():
    # New parameters:
    # cpu temp
    #"1.3.6.1.4.1.8072.1.3.2.3.1.1.14.103.101.116.95.99.112.117.95.116.101.109.112.95.49" up to 53
    #.1.3.6.1.4.1.8072.1.3.2.4.1.2.16.115.104.111.119.45.99.97.114.100.115.45.108.111.97.100.49.1
    temp_params = {}
    for num in range(1, 3):
        name = "GPU_LOAD_0" + '%02d' % num
        desc = "Загрузка ядра GPU " + str(num)
        last_oid = 48 + num
        temp_params[name] = pars.Parameter(
            name, desc, desc, "float", 
            "1.3.6.1.4.1.8072.1.3.2.4.1.2.16.115.104.111.119.45.99.97.114.100.115.45.108.111.97.100." + str(last_oid) + ".1",
            "snmp", "%", visible=False)
        temp_params[name].vrange = [0, 100]

    return temp_params

def get_parameters_for_disk_read_write():
    temp_params = {}
    for num in range(1, 35):
        name = "DISK_READ_" + '%02d' % num
        if num in [33, 34]:
            desc = "Скорость чтения с системного диска " + str(num-32)
        else:
            desc = "Скорость чтения с диска " + str(num)
        last_oid = 48 + num
        x = str(num)
        if len(x) > 1:
            last_oid = str(ord(x[0])) + '.' + str(ord(x[1]))
        else:
            last_oid = str(ord(x[0]))
        oid_begin = "1.3.6.1.4.1.8072.1.3.2.4.1.2.15.115.104.111.119.45.100.105.115.107.45.114.101.97.100." if len(x) == 1 else ".1.3.6.1.4.1.8072.1.3.2.4.1.2.16.115.104.111.119.45.100.105.115.107.45.114.101.97.100."
        temp_params[name] = pars.Parameter(
            name, desc, desc, "float", 
            oid_begin + str(last_oid) + ".1",
            "snmp", "kB/s", visible=False)
        name = "DISK_WRITE_" + '%02d' %num
        if num in [33, 34]:
            desc = "Скорость записи на системный диск " + str(num-32)
        else:
            desc = "Скорость записи на диск " + str(num)
        oid_begin = "1.3.6.1.4.1.8072.1.3.2.4.1.2.16.115.104.111.119.45.100.105.115.107.45.119.114.105.116.101." if len(x) == 1 else "1.3.6.1.4.1.8072.1.3.2.4.1.2.17.115.104.111.119.45.100.105.115.107.45.119.114.105.116.101."
        temp_params[name] = pars.Parameter(
            name, desc, desc, "float", 
            oid_begin + str(last_oid) + ".1",
            "snmp", "kB/s", visible=False)
    return temp_params
