import nms.core.parameters as pars
from nms.core.context import Context
from nms.core.devices import Device, GeneralDevice, DeviceContainer
import nms.config as cfg
import nms.nmsconfig.param_group_config as cfgp

LOAD_INTERVALS = {'fast': 3, 'normal': 10, 'slow': 300}
SPEC_PDU = 'APC 8981 (Rack PDU 2G, Switched, ZeroU, 11kW, 230V, (21) C13 & (3) C19)'
SPEC_ASUS_720_SERV = 'RS720-e7/RS12-E (2xXeon, 16xDimm, 6xSATA, 12xHDD, (1+1)PSU, 2U)'


def create_context():
    """ One computational node only. """
    cfg.DEFAULT_COLLECT_INTERVAL = 20
    context = Context()
    customize_parameters(context)
    for serv_id in range(1, 7):
        add_tyan_server(context, str(serv_id))
        add_control_servers(context)
        add_pdus(context)
        add_rmu(context)
        add_switch(context)
        add_raid(context)
        return context


def customize_parameters(context):
    """ Specify some different parameters such as online. """
    context.parameters['online'].is_enum = True
    context.parameters['online'].enum = {1: 'online', 0: 'offline'}
    context.parameters['online_bmc'].is_enum = True
    context.parameters['online_bmc'].enum = {1: 'online', 0: 'offline'}


def add_tyan_server(context, _id):
    """ Add device and general device to context. """

    # Configure parameters:
    cpu_temp_params = get_parameters_for_cpu_temperature_tyan()
    gpu_temp_params = get_parameters_for_gpu_temperature()
    gpu_load_params = get_parameters_for_gpu_load()
    disk_params = get_parameters_for_disk_read_write()
    context.parameters.update(cpu_temp_params)
    context.parameters.update(gpu_temp_params)
    context.parameters.update(gpu_load_params)
    context.parameters.update(disk_params)
    name = 'node' + _id
    param_list = ['online', 'memTotalReal', 'memOccupiedReal',
                  'memCachedReal', 'memFreeReal', 'memFreePercent',
                  'online', 'cpuUser', 'diskOccupied', 'diskOccupiedBytes',
                  'diskBlockSize', 'diskTotalBytes', 'diskTotal', ]
    param_list.extend(list(cpu_temp_params))
    param_list.extend(list(gpu_temp_params))
    param_list.extend(list(gpu_load_params))
    param_list.extend(list(disk_params))

    # Configure device:
    context.devices[name] = Device(name, 'Вычислительный сервер ' + _id,
                                   'snmp', param_list)
    context.devices[name].ip_address = '10.1.3.' + _id
    context.devices[name].ip_addr = '10.1.3.' + _id

    bmc_name = name + 'BMC'
    bmc_param_list = ['CPU1_DTS_Temp', 'M_Card_Area_Temp', 'LAN_Area_Temp',
                      'MB_Inlet_temp',
                      'CPU1_DIMM_A0', 'CPU1_DIMM_B0',
                      'CPU1_DIMM_C0', 'CPU1_DIMM_D0',
                      'CPU0_VCore', 'CPU1_VCore',
                      'CPU0_Memory', 'CPU1_Memory',
                      '3_3V', '5V', '12V', 'VBAT',
                      'SYS_FAN_1', 'SYS_FAN_2', 'SYS_FAN_3',
                      'SYS_FAN_4', 'SYS_FAN_5', 'SYS_FAN_6',
                      'PSU1_Power', 'PSU2_Power', 'PSU3_Power', 'online_bmc']

    bmc_dev = Device(bmc_name, 'Вычислительный сервер ' + _id + ' BMC', 'ipmi',
                     bmc_param_list, 'tyan', True)
    bmc_dev.ip_address = '10.1.3.10' + _id
    bmc_dev.ip_addr = '10.1.3.10' + _id
    context.devices[bmc_name] = bmc_dev

    # Configure general device:
    context.general_devices[name] = GeneralDevice(
        name, 'Вычислительный сервер ' + _id, '', [name, bmc_name], context)
    gdev = context.general_devices[name]
    gdev.main_parameters = []
    gdev.main_parameters.append('cpuUser')
    gdev.main_parameters.append('memFreePercent')
    gdev.img = 'dev_img_arbyte_gpuserv.png'

    # Param groups:

    ipmi_temp_params = list(filter(
        lambda name: 'temp' in name.lower() or 'dimm' in name.lower(),
        bmc_dev.params_dict.keys()))
    for param_name in ipmi_temp_params:
        bmc_dev.params_dict[param_name].visible = False
        ipmi_temp_group = pars.ParameterGroup(
            'ipmi_temp_group', 'Датчики температуры', ipmi_temp_params)
        ipmi_temp_group.do_plot = False
        ipmi_temp_group.setup(gdev.params_dict)

    power_params = list(filter(
        lambda name: 'power' in name.lower(),
        bmc_dev.params_dict.keys()))
    for param_name in power_params:
        bmc_dev.params_dict[param_name].visible = False
        power_group = pars.ParameterGroup(
            'power_group', 'Мощность БП', power_params)
        power_group.do_plot = False
        power_group.setup(gdev.params_dict)

    ipmi_voltage_params = [param.name for param in filter(
        lambda param: 'Напряжение' in param.desc,
        bmc_dev.params_dict.values())]
    for param_name in ipmi_voltage_params:
        bmc_dev.params_dict[param_name].visible = False
        ipmi_voltage_group = pars.ParameterGroup(
            'ipmi_voltage_group', 'Напряжения', ipmi_voltage_params)
        ipmi_voltage_group.do_plot = False
        ipmi_voltage_group.setup(gdev.params_dict)

    ipmi_fan_params = [param.name for param in filter(
        lambda param: 'Скорость вращения' in param.desc,
        bmc_dev.params_dict.values())]
    for param_name in ipmi_fan_params:
        bmc_dev.params_dict[param_name].visible = False
        ipmi_fan_group = pars.ParameterGroup(
            'ipmi_fan_group', 'Вентиляторы', ipmi_fan_params)
        ipmi_fan_group.do_plot = False
        ipmi_fan_group.setup(gdev.params_dict)

    gpu_load_group = pars.ParameterGroup('gpu_load_group', 'Загрузка GPU',
                                         list(gpu_load_params))
    gpu_load_group.do_plot = True
    gpu_load_group.setup(gdev.params_dict)
    gpu_temp_group = pars.ParameterGroup('gpu_temp_group', 'Температура GPU',
                                         list(gpu_temp_params))
    gpu_temp_group.do_plot = True
    gpu_temp_group.setup(gdev.params_dict)
    cpu_temp_group = pars.ParameterGroup('cpu_temp_group', 'Температура CPU',
                                         list(cpu_temp_params))
    cpu_temp_group.do_plot = True
    cpu_temp_group.setup(gdev.params_dict)
    disk_group = pars.ParameterGroup('disk_group', 'Диски системы',
                                     list(disk_params))
    disk_group.setup(gdev.params_dict)
    gdev.param_groups = {'gpu_load_group': gpu_load_group,
                         'gpu_temp_group': gpu_temp_group,
                         'cpu_temp_group': cpu_temp_group,
                         'disk_group': disk_group,
                         'ipmi_temp_group': ipmi_temp_group,
                         'ipmi_voltage_group': ipmi_voltage_group,
                         'ipmi_fan_group': ipmi_fan_group,
                         'power_group': power_group,
                        }

    container = DeviceContainer(gdev.name, gdev.full_name,
                                gdev.description, context)
    container.leaf = True
    container.is_online = gdev.is_online
    container.do_have_alerts = gdev.do_have_alerts
    context.device_containers[gdev.name] = container


def add_server(context, name, name_full, ip, ip_bmc):
    """ """
    server_param_list = ['memTotalReal',
                         'memOccupiedReal',
                         'memCachedReal',
                         'memFreeReal',
                         'memFreePercent',
                         'diskOccupied',
                         'diskOccupiedBytes',
                         'cpuUser',
                         'diskTotalBytes',
                         'diskBlockSize',
                         'diskTotal',
                         'online']
    server_bmc_param_list = ["VCORE1",
                             "VCORE2",
                             "CpuTemp1",
                             "CpuTemp2",
                             "FRNT_FAN1",
                             "FRNT_FAN2",
                             "FRNT_FAN3",
                             "FRNT_FAN4",
                             'online_bmc'
                            ]
    dev = Device(name, name_full, 'snmp', server_param_list)
    dev.ip_addr = ip
    dev_bmc = Device(name + 'BMC', name_full + ' BMC', 'ipmi',
                     server_bmc_param_list, 'bmc', True)
    dev_bmc.ip_addr = ip_bmc
    context.devices[dev.name] = dev
    context.devices[dev_bmc.name] = dev_bmc
    gdev = GeneralDevice(
        name, name_full,
        """Предназначен для функционирования системы мониторинга и удаленной
        загрузки серверов решающего поля.<br>
        <b>Платформа</b>: {}<br>
        <a href='http://{}'> Перейти к веб интерфейсу BMC</a><br>
        <a href='/static/{}'> Документация</a>
        """.format(SPEC_ASUS_720_SERV, 'csm_bmc.s', 'doc/servdoc.pdf'),
        [dev.name, dev_bmc.name], context)
    gdev.img = 'dev_img_serv_arbyte.png'
    context.general_devices[gdev.name] = gdev
    container = DeviceContainer(gdev.name, gdev.full_name,
                                gdev.description, context)
    container.leaf = True
    container.is_online = gdev.is_online
    container.do_have_alerts = gdev.do_have_alerts
    context.device_containers[gdev.name] = container


def add_pdus(context):
    """ """
    param_list = ['online']
    for phase_num in range(1, 4):
        phase_num = str(phase_num)

        name = "LoadStatusPhase{}".format(phase_num)
        param_list.append(name)
        context.parameters[name] = pars.Parameter(
            name,
            full_name="Нагрузка на фазе №{}".format(phase_num),
            desc="Статус нагрузки фазы №{}".format(phase_num),
            _type="int",
            identifier=".1.3.6.1.4.1.318.1.1.26.6.3.1.4.{}".format(phase_num),
            protocol="snmp",
            units="1 - низкая 2 - нормальная 3 - на грани 4 - перегрузка",
            value_boundaries=(None, 1, 3, 4))
        context.parameters[name].is_enum = True
        context.parameters[name].enum = {1: 'низкая',
                                         2: 'нормальная',
                                         3: 'на грани перегрузки',
                                         4: 'перегрузка'}
        name = "CurrentPhase{}".format(phase_num)
        param_list.append(name)
        context.parameters[name] = pars.Parameter(
            name,
            full_name="Ток фазы №{}".format(phase_num),
            desc="Ток фазы №{}".format(phase_num),
            _type="int",
            identifier=".1.3.6.1.4.1.318.1.1.26.6.3.1.5.{}".format(phase_num),
            protocol="snmp",
            units="0.1A",
            value_boundaries=(None, None, 130, 160))

        name = "VoltagePhase{}".format(phase_num)
        param_list.append(name)
        context.parameters[name] = pars.Parameter(
            name,
            full_name="Напряжение фазы №{}".format(phase_num),
            desc="Напряжение фазы №{}".format(phase_num),
            _type="int",
            identifier=".1.3.6.1.4.1.318.1.1.26.6.3.1.6.{}".format(phase_num),
            protocol="snmp",
            units="В",
            value_boundaries=(None, 200, 250, 260))

        name = "PowerPhase{}".format(phase_num)
        param_list.append(name)
        context.parameters[name] = pars.Parameter(
            name,
            full_name="Мощность фазы №{}".format(phase_num),
            desc="Мощность фазы №{}".format(phase_num),
            _type="int",
            identifier=".1.3.6.1.4.1.318.1.1.26.6.3.1.7.{}".format(phase_num),
            protocol="snmp",
            units="0.1 кВт")

    for pdu_num in range(1, 5):
        dev = Device('pdu'+str(pdu_num),
                     'Распределитель питания №' + str(pdu_num),
                     'snmp', param_list)
        dev.ip_addr = '10.1.10.%s' % pdu_num
        context.devices[dev.name] = dev
        gdev = GeneralDevice(
            'pdu' + str(pdu_num),
            'Распределитель питания №' + str(pdu_num),
            '''Распределитель питания APC 8981®<br>
            <b>Платформа</b> {}.<br>
            <a href='http://{}'> Перейти к веб интерфейсу.</a><br>
            <a href='/static/{}'> Документация. </a><br>
            '''.format(SPEC_PDU, 'xxxxxx', 'doc/pdudoc.pdf'),
            ['pdu' + str(pdu_num)], context)
        gdev.img = 'dev_img_apc_ap8981.png'
        context.general_devices[gdev.name] = gdev
        container = DeviceContainer(gdev.name, gdev.full_name,
                                    gdev.description, context)
        container.leaf = True
        container.is_online = gdev.is_online
        container.do_have_alerts = gdev.do_have_alerts
        context.device_containers[gdev.name] = container

def add_switch(context):
    """switch"""
    switch_param_list = ['online']
    name = "memUsageSwitch"
    context.parameters[name] = pars.Parameter(
        name,
        full_name="Процент используемой памяти",
        desc="Процент используемой памяти",
        _type="int",
        identifier="1.3.6.1.4.1.2011.5.25.31.1.1.1.1.7.67108873",
        protocol="snmp",
        units="%")
    switch_param_list.append(name)

    name = "CpuSwitch"
    context.parameters[name] = pars.Parameter(
        name,
        full_name="Загрузка процессора",
        desc="Загрузка процессора",
        _type="int",
        identifier="1.3.6.1.4.1.2011.5.25.31.1.1.1.1.5.67108873",
        protocol="snmp",
        units="%")
    switch_param_list.append(name)

    name = "CpuTempSwitch"
    context.parameters[name] = pars.Parameter(
        name,
        full_name="Температура процессора в °C",
        desc="Температура процессора в °C",
        _type="int",
        identifier="1.3.6.1.4.1.2011.5.25.31.1.1.1.1.11.67108873",
        protocol="snmp",
        units="°C",
        value_boundaries=(None, 0, 80, None))
    switch_param_list.append(name)

    # get port's name 1.3.6.1.2.1.2.2.1.2
    for port_num in range(1, 42):
        name = "curr_octet_switch_in_port{}".format(port_num)
        context.parameters[name] = pars.Parameter(
            name,
            full_name="Число полученных октетов порт №".format(port_num),
            desc="Число полученных октетов порт №".format(port_num),
            _type="int",
            identifier="1.3.6.1.2.1.2.2.1.10.{}".format(port_num),
            protocol="snmp",
            units="octet")
        switch_param_list.append(name)

        name = "old_octet_switch_in_port{}".format(port_num)
        context.parameters[name] = pars.Parameter(
            name,
            full_name="Число полученных октетов при предидущем опросе порт №".
            format(port_num),
            desc="Число полученных октетов при предидущем опросе порт №".
            format(port_num),
            identifier="",
            protocol="",
            _type="int",
            units="octet")
        switch_param_list.append(name)

        name = "last_time_switch_in_port{}".format(port_num)
        context.parameters[name] = pars.Parameter(
            name,
            full_name="Время последнего вычисления входящей скорости порта №".
            format(port_num),
            desc="Время последнего вычисления входящей скорости порта №".
            format(port_num),
            identifier="",
            protocol="",
            _type="int",
            units="s")
        switch_param_list.append(name)

        name = "speed_switch_in_port{}".format(port_num)
        context.parameters[name] = pars.CalculatedParameter(
            name,
            full_name="Входящая скорость порта №".format(port_num),
            desc="Входящая скорость порта №".format(port_num),
            identifier="",
            protocol="calc",
            _type="float",
            is_calculated=True,
            list_of_function_to_calculate='-',
            names_of_params_to_calculate=\
                ['curr_octet_switch_in_port{}'.format(port_num),
                 'old_octet_switch_in_port{}'.format(port_num),
                 'last_time_switch_in_port{}'.format(port_num)],
            units="Mb/s")
        switch_param_list.append(name)

        name = "curr_octet_switch_out_port{}".format(port_num)
        context.parameters[name] = pars.Parameter(
            name,
            full_name="Число переданных октетов порт №".format(port_num),
            desc="Число переданных октетов порт №".format(port_num),
            _type="int",
            identifier="1.3.6.1.2.1.2.2.1.16.{}".format(port_num),
            protocol="snmp",
            units="octet")
        switch_param_list.append(name)

        name = "old_octet_switch_out_port{}".format(port_num)
        context.parameters[name] = pars.Parameter(
            name,
            full_name="Число переданных октетов при предидущем опросе порт №".
            format(port_num),
            desc="Число переданных октетов при предидущем опросе порт №".
            format(port_num),
            identifier="",
            protocol="",
            _type="int",
            units="octet")
        switch_param_list.append(name)

        name = "last_time_switch_out_port{}".format(port_num)
        context.parameters[name] = pars.Parameter(
            name,
            full_name="Время последнего вычисления исходящей скорости порта №".
            format(port_num),
            desc="Время последнего вычисления исходящей скорости порта №".
            format(port_num),
            identifier="",
            protocol="",
            _type="int",
            units="s")
        switch_param_list.append(name)

        name = "speed_switch_out_port{}".format(port_num)
        context.parameters[name] = pars.CalculatedParameter(
            name,
            full_name="Исходящая скорость порта №".format(port_num),
            desc="Исходящая скорость порта №".format(port_num),
            identifier="",
            protocol="calc",
            _type="float",
            is_calculated=True,
            list_of_function_to_calculate='-',
            names_of_params_to_calculate=\
                ['curr_octet_switch_out_port{}'.format(port_num),
                 'old_octet_switch_out_port{}'.format(port_num),
                 'last_time_switch_out_port{}'.format(port_num)],
            units="Mb/s")
        switch_param_list.append(name)


    for fan_num in range(0, 5):
        name = "FANSwitch{}".format(fan_num)
        context.parameters[name] = pars.Parameter(
            name,
            full_name="Скорость вращения вентилятора № {}".format(fan_num),
            desc="Скорость вращения вентиляторов в процентах",
            _type="int",
            identifier=
            "1.3.6.1.4.1.2011.5.25.31.1.1.10.1.5.0.{}".format(fan_num),
            protocol="snmp",
            units="%")
        switch_param_list.append(name)


    optic_oid_list = [67307022, 67321934, 67321998]
    for optic_num in range(0, 3):
        name = "OpticTempSwitch{}".format(optic_num)
        context.parameters[name] = pars.Parameter(
            name,
            full_name="Температура оптического модуля № {}".format(optic_num),
            desc="Температура оптического модуля № {}".format(optic_num),
            _type="int",
            identifier="1.3.6.1.4.1.2011.5.25.31.1.1.3.1.5.{}".format(
                optic_oid_list[optic_num]),
            protocol="snmp",
            units="%")
        switch_param_list.append(name)

    dev = Device('switch', 'switch', 'snmp', switch_param_list)
    dev.ip_addr = "10.1.5.5"
    context.devices[dev.name] = dev
    gdev = GeneralDevice("switch", "коммутатор", "", ["switch"], context)
    context.general_devices[gdev.name] = gdev

def add_raid(context):
    """ Raid context."""
    # in C
    min_err_cpu_temp  = 0
    min_warn_cpu_temp = 10
    max_warn_cpu_temp = 80
    max_err_cpu_temp  = 85

    param_list = ['online']
    raid_oid = '1.3.6.1.3.94.1.8.1.6.32.128.0.192.255.29.179.42.0.0.0.0.0.0.0.0.'
    raid_temp_regexp = r': ["\w\s-]+: (\d+)'
    for raid in [1, 2]:
        index = 1
        for temp in range(1, 4):
            for ctrl in ['A', 'B']:
                name = "OnBoardTemp{}_Ctrl{}{}".format(temp, ctrl, raid)
                context.parameters[name] = pars.Parameter(
                    name,
                    full_name="Температурный сенсор {}{} raid{}".
                    format(temp, ctrl, raid),
                    desc="Показания температурного сенсора {}{} raid{}".
                    format(temp, ctrl, raid),
                    _type="float",
                    identifier="{}{}".format(raid_oid, index),
                    protocol="snmp",
                    units="°C",
                    reg_expression=raid_temp_regexp,
                    value_boundaries=(min_err_cpu_temp,
                                      min_warn_cpu_temp,
                                      max_warn_cpu_temp,
                                      max_err_cpu_temp))
                param_list.append(name)
                index += 1

        for ctrl in ['A', 'B']:
            name = "DiskCtrlTemp_Ctrl{}{}".format(ctrl, raid)
            context.parameters[name] = pars.Parameter(
                name,
                full_name="Дисковый контроллер {} raid{}".
                format(ctrl, raid),
                desc="Температура дискового контроллера {} raid{}".
                format(ctrl, raid),
                _type="float",
                identifier="{}{}".format(raid_oid, index),
                protocol="snmp",
                units="°C",
                reg_expression=raid_temp_regexp,
                value_boundaries=(min_err_cpu_temp,
                                  min_warn_cpu_temp,
                                  max_warn_cpu_temp,
                                  max_err_cpu_temp))
            param_list.append(name)
            index += 1

        for ctrl in ['A', 'B']:
            name = "MemCtrlTemp_Ctrl{}{}".format(ctrl, raid)
            context.parameters[name] = pars.Parameter(
                name,
                full_name="Контроллер памяти {} raid{}".
                format(ctrl, raid),
                desc="Температура контроллера памяти {} raid{}".
                format(ctrl, raid),
                _type="float",
                identifier="{}{}".format(raid_oid, index),
                protocol="snmp",
                units="°C",
                reg_expression=raid_temp_regexp,
                value_boundaries=(min_err_cpu_temp,
                                  min_warn_cpu_temp,
                                  max_warn_cpu_temp,
                                  max_err_cpu_temp))
            param_list.append(name)
            index += 1

    dev = Device('raid', 'raid', 'snmp', param_list)
    dev.ip_addr = "10.1.5.1"
    context.devices[dev.name] = dev
    gdev = GeneralDevice("raid", "Дисковое хранилище", "",
                         #"Assuredsan dothill 3730 20 tb рейд массив raid5<br>
                         #<a href='http://{}'> Перейти к веб интерфейсу</a><br>
                         #<a href='/static/{}'>Страница спецификации</a><br>
                         #<a href='/static/{}'>Руководство по эксплуатации</a><br>",
                         ["raid"], context)
    context.general_devices[gdev.name] = gdev

def add_rmu(context):
    """ """
    # in C
    min_err_outer_temp  = 10
    min_warn_outer_temp = 15
    max_warn_outer_temp = 35
    max_err_outer_temp  = 40

    # in %
    min_err_outer_humid   = 0
    min_warn_outer_humid  = 5
    max_warn_outer_humid  = 85
    max_err_outer_humid   = 90
    param_list = ['online']
    temp_sensor_ids = [2, 3, 5, 6]
    for sensor_num, _id in enumerate(temp_sensor_ids):
        name = 'temperature_sensor_{}'.format(sensor_num)
        param_list.append(name)
        context.parameters[name] = pars.Parameter(
            name,
            full_name="Датчик температуры №{}".format(sensor_num),
            desc="Показания датчика температуры №{}".format(sensor_num),
            _type="float",
            identifier="1.3.6.1.4.1.318.1.1.10.4.2.3.1.5.0.{}".format(_id),
            protocol="snmp",
            units="°C",
            value_boundaries=(min_err_outer_temp, min_warn_outer_temp,
                              max_warn_outer_temp, max_err_outer_temp))

        name = 'humidity_sensor_{}'.format(sensor_num)
        param_list.append(name)
        context.parameters[name] = pars.Parameter(
            name,
            full_name="Датчик влажности №{}".format(sensor_num),
            desc="Показания датчика влажности №{}".format(sensor_num),
            _type="float",
            identifier=".1.3.6.1.4.1.318.1.1.10.4.2.3.1.6.0.{}".format(_id),
            protocol="snmp",
            units="%",
            value_boundaries=(min_err_outer_humid, min_warn_outer_humid,
                              max_warn_outer_humid, max_err_outer_humid))

    door_sensor_ids = [1, 4]
    door_name = {1: 'передняя', 4: 'задняя'}
    for sensor_num, _id in enumerate(door_sensor_ids):
        name = 'door_sensor_{}'.format(sensor_num)
        param_list.append(name)
        context.parameters[name] = pars.Parameter(
            name,
            full_name="Датчик двери: {}".format(door_name[_id]),
            desc="Датчик состояния двери: " + door_name[_id],
            _type="int",
            identifier="1.3.6.1.4.1.318.1.1.10.4.3.2.1.5.0.{}".format(_id),
            protocol="snmp",
            units="2 - открыто. 1 - закрыто.",
            vrange=[0, 3])
        context.parameters[name].is_enum = True
        context.parameters[name].enum = {2: 'открыто', 1: 'закрыто'}

    dev = Device('rmu1', 'Модуль контроля окружающей среды', 'snmp', param_list)
    dev.ip_addr = '10.1.11.1'
    context.devices[dev.name] = dev
    gdev = GeneralDevice('rmu1',
                         'Модуль контроля окружающей среды №1',
                         '''NetBotz® 200 Модуль контроля окружающей среды, позволяет контролировать
                         закрытие дверей, температуру и влажность. <br>
                         <a href='http://{}'> Перейти к веб интерфейсу</a><br>
                         <a href='/static/{}'> Документация</a><br>
                         '''.format('rmu.s', 'doc/netbotz_guide.pdf'),  # TODO: check if right.
                         ['rmu1'], context)
    gdev.img = 'dev_img_netbootz_200.png'

    context.general_devices[gdev.name] = gdev
    container = DeviceContainer(gdev.name, gdev.full_name,
                                gdev.description, context)
    container.leaf = True
    container.is_online = gdev.is_online
    container.do_have_alerts = gdev.do_have_alerts
    context.device_containers[gdev.name] = container


def add_control_servers(context):
    """ """
    add_server(context, 'MonitoringServer', 'Сервер мониторинга',
               '10.1.4.1', '10.1.4.101')
    # TODO: change name to valid english name
    add_server(context, 'ServerRaspred', 'Сервер распределения',
               '10.1.4.2', '10.1.4.102')
    add_server(context, 'FileServer', 'Файловый сервер',
               '10.1.4.3', '10.1.4.103')


def get_parameters_for_cpu_temperature_tyan():
    """ """
    # New parameters:
    # cpu temp
    temp_params = {}
    for num in range(1, 6):
        name = "CPU_TEMP_0" + '%02d' % num
        desc = "Температура CPU: датчик " + str(num)
        last_oid = 48 + num
        temp_params[name] = pars.Parameter(
            name, desc, desc, "float",
            #"1.3.6.1.4.1.8072.1.3.2.3.1.1.14.103.101.116.95.99.112.117.95.\
            # 116.101.109.112.95." + str(last_oid),
            "1.3.6.1.4.1.8072.1.3.2.4.1.2.14.103.101.116.95.99.112.117.95.\
             116.101.109.112.95." + str(last_oid) + ".1",
            "snmp", "C", visible=False)
        temp_params[name].boundaries = pars.Boundaries(0, 5, 85, 105)
        temp_params[name].collect_interval = LOAD_INTERVALS['fast']
        return temp_params


def get_parameters_for_gpu_temperature():
    """ """
    # New parameters:
    # cpu temp
    temp_params = {}
    for num in range(1, 9):
        name = "GPU_TEMP_0" + '%02d' % num
        desc = "Температура ядра GPU " + str(num)
        last_oid = 48 + num
        par = pars.Parameter(
            name, desc, desc, "float",
            "1.3.6.1.4.1.8072.1.3.2.4.1.2.16.115.104.111.119.45.99.97.114.\
             100.115.45.116.101.109.112." + str(last_oid) + ".1",
            "snmp", "C", visible=False)
        par.boundaries = pars.Boundaries(-10, -2, 85, 105)
        par.collect_interval = LOAD_INTERVALS['fast']
        temp_params[name] = par
        return temp_params

def get_parameters_for_gpu_load():
    """ """
    # New parameters:
    # cpu temp
    #"1.3.6.1.4.1.8072.1.3.2.3.1.1.14.103.101.116.95.99.112.117.95.116.101.109.112.95.49" up to 53
    #.1.3.6.1.4.1.8072.1.3.2.4.1.2.16.115.104.111.119.45.99.97.114.100.115.45.108.111.97.100.49.1
    temp_params = {}
    for num in range(1, 9):
        name = "GPU_LOAD_0" + '%02d' % num
        desc = "Загрузка ядра GPU " + str(num)
        last_oid = 48 + num
        temp_params[name] = pars.Parameter(
            name, desc, desc, "float",
            "1.3.6.1.4.1.8072.1.3.2.4.1.2.16.115.104.111.119.45.99.97.114.\
             100.115.45.108.111.97.100." + str(last_oid) + ".1",
            "snmp", "%", visible=False)
        temp_params[name].vrange = [0, 100]
        temp_params[name].collect_interval = LOAD_INTERVALS['fast']
        return temp_params

def get_parameters_for_disk_read_write():
    """ """
    temp_params = {}
    for num in range(1, 2):
        name = "DISK_READ_" + '%02d' % num
        desc = "Скорость чтения с диска " + str(num)
        last_oid = 48 + num
        temp_params[name] = pars.Parameter(
            name, desc, desc, "float",
            "1.3.6.1.4.1.8072.1.3.2.4.1.2.15.115.104.111.119.45.100.105.115.\
             107.45.114.101.97.100." + str(last_oid) + ".1",
            "snmp", "kB/s", visible=False)
        name = "DISK_WRITE_" + str(num)
        desc = "Скорость записи на диск " + str(num)
        temp_params[name] = pars.Parameter(
            name, desc, desc, "float",
            "1.3.6.1.4.1.8072.1.3.2.4.1.2.16.115.104.111.119.45.100.105.115.\
             107.45.119.114.105.116.101." + str(last_oid) + ".1",
            "snmp", "kB/s", visible=False)
        temp_params[name].collect_interval = LOAD_INTERVALS['normal']
        return temp_params
