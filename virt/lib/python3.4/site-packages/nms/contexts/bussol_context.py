import nms.nmsconfig.device_config as cfg_dev
import nms.nmsconfig.param_group_config as cfg_gr
import nms.config as cfg

import nms.core.parameters as pars
from nms.core.context import Context
from nms.core.devices import Device, GeneralDevice, DeviceContainer


def create_context():
    context = Context()
    _init_devices(context)
    _init_addressing(context)
    _init_gdevices(context)
    _init_par_groups(context)
    _init_device_containers(context)
    return context


def _init_devices(context):
    """ Initializes all devices using config file. """
    for dev_ini in cfg_dev.devices_init:
        context.devices[dev_ini[0]] = Device(*dev_ini)

def _init_addressing(context):
    """ Set ip addresses to devices"""
    for device_name in context.devices.keys():
        if device_name not in cfg.addressing.keys():
            continue
        context.devices[device_name].ip_address = cfg.addressing[device_name]

def _init_gdevices(context):
    """ Initializes all general devices using config file. """
    for gdev_ini in cfg_dev.gdevices_init:
        gdev_args = []
        gdev_args.extend(gdev_ini)
        gdev_args.append(context)
        context.general_devices[gdev_ini[0]] = GeneralDevice(*gdev_args)

def _init_par_groups(context):
    """ Init groups of parameter in general devices. """
    for gdev_name, par_groups in cfg_dev.PARAM_GROUP_DEV_INIT.items():
        gdev = context.general_devices[gdev_name]
        for group_name in par_groups:
            group = pars.ParameterGroup(group_name, group_name,
                               cfg_gr.ParamGroupInit[group_name])
            group.setup(gdev.params_dict)
            gdev.param_groups[group_name] = group


def _init_device_containers(context):
    """ For index view representation. """
    for cont_name, param in cfg_dev.DeviceContainersInit.items():
        contain_args = []
        contain_args.extend(param)
        contain_args.append(context)
        context.device_containers[cont_name] = DeviceContainer(*contain_args)
    for cont_name, gd_names in cfg_dev.ContainersStorage.items():
        for gd_name in gd_names:
            context.device_containers[cont_name].children.append(
                context.general_devices[gd_name])
            context.general_devices[gd_name].is_in_group = True

    for gdev in context.general_devices.values():
        if not gdev.is_in_group:
            container = DeviceContainer(gdev.name, gdev.full_name,
                                        gdev.description, context)
            container.leaf = True
            container.is_online = gdev.is_online
            container.do_have_alerts = gdev.do_have_alerts
            context.device_containers[gdev.name] = container
